[tool.poetry]
name = "dfipy"
# Package versions are derived from Git tags in CI and overridden during
# building/publishing. See build/publish jobs in .gitlab-ci.yml.
version = "0.0.0"
description = "Python SDK targeting the DFI API"
authors = [
  "Robert Edwards <robert.edwards@generalsystem.com>",
  "Maurizio Morriello <maurizio.morriello@generalsystem.com>",
  "Sebastiano Ferraris <sebastiano.ferraris@generalsystem.com>",
  "Tom Pierce <tom.pierce@generalsystem.com>",
  "Tom Reeve <tom.reeve@generalsystem.com>",
]
maintainers = ["General System"]
readme = "README.md"
homepage = "https://www.generalsystem.com/"
repository = "https://github.com/thegeneralsystem/dfipy"
documentation = "https://dfipy.docs.generalsystem.com/"
include = ["LICENCE"]
packages = [{ include = "dfi" }]

[tool.poetry.dependencies]
pandas = "^2.0.1"
python = "^3.10"
requests = "^2.30.0"
sseclient-py = "^1.7.2"
tqdm = "^4.65.0"
pyarrow = "14.0.1"
boto3 = "^1.34.19"
natsort = "^8.4.0"
sqloxide = "^0.1.43"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
coverage = "^7.2.5"
flake8 = "^6.0.0"
isort = "^5.12.0"
pylint = "^3.0.3"
pytest = "^7.2.2"
pytest-dotenv = "^0.5.2"
pytest-order = "^1.1.0"
ipykernel = "^6.25.2"
pytest-dependency = "^0.5.1"
ruff = "^0.2.1"
mypy = "^1.8.0"
typing-extensions = "^4.9.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst_parser = "^2.0.0"
sphinx = "^7.0.1"
sphinx-autodoc2 = "^0.5.0"
sphinx-favicon = "^1.0.1"
sphinxcontrib-napoleon = "^0.7"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.5.0"
sphinx-togglebutton = "^0.3.2"
sphinx-book-theme = "^1.1.0"
sphinx-rtd-theme = "^2.0.0"
alabaster = "^0.7.15"
furo = "^2023.9.10"
pydata-sphinx-theme = "^0.15.2"
sphinx-autobuild = "^2021.3.14"
sphinxext-opengraph = "^0.9.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
source = ["dfi"]

[tool.mypy]
exclude = ["^docs/"]
disable_error_code = ["name-defined"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
implicit_reexport = true
# install_types = true
# non_interactive = true
pretty = true
show_column_numbers = true
show_error_context = true
# show_error_end = true
# warn_return_any = true
no_warn_return_any = true
warn_unreachable = true


[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist

    # The following are specific to Black, you probably don't want those.
    | blib2to3
    | tests/data
)/
'''

[tool.isort]
profile = "black"
py_version = "310"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120
src_paths = ["./dfi", "./tests"]
skip_glob = ["ci/cache"]


[tool.pylint.'BASIC']
good-names= ["df", "fp"]

[tool.pylint.'MASTER']
jobs = 0       # use all cores
fail-under = 9

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120

disable = [
  "C0116", # missing-docstring
  "C0301", # line-too-long
  "W1401", # anomalous-backslash-in-string
  "R0801", # similar-lines
  "R0902", # too-many-instance-attributes
  "R0903", # too-few-public-methods
  "R0913", # too-many-arguments
  "R1735", # use-dict-literal
]

[tool.pylint.'MISCELLANEOUS']
notes = [
  "TODO",
  "FIXME",
  "XXX",
] # List of note tags to take in consideration, separated by a comma.


[tool.pytest.ini_options]
testpaths = ["tests", "integration_tests"]
log_cli = true
log_cli_level = "WARNING"
addopts = [
    "--import-mode=importlib",
]

######################
# ruff
######################
[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"
include = ["pyproject.toml", "dfi/**/*.py", "tests/**/*.py", "integration_tests/**/*.py"]
extend-include = ["*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.format]
# Black compatible settings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = true
docstring-code-line-length = 60

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # Pyflakes
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
    "I", # isort
    "RUF", # ruff-specific-rules
    "PL", # Pylint rules
]
ignore = [
  "D203", # one-blank-line-before-class
  "D213", # multi-line-summary-second-line
  "E501", # line-too-long
]
extend-select = [
  "UP",  # pyupgrade
  "D",   # pydocstyle
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"integration_tests/**/*.py" = ["D103", "PLR0913"]
"tests/**/*.py" = ["D103", "PLR0913"]