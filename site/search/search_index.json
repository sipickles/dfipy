{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dfipy","text":"<p><code>dfipy</code> is a library built for data scientists &amp; analysts for data scientists &amp; analysts. It is designed as a lightweight Python client for interacting with the General System Platform API.</p> <p>Each GS Platform service is accessible via an appropriately named class:</p> <ul> <li>Datasets - For accessing the Datasets API: create, edit, delete, and retrieve information about datasets in the GS Platform.</li> <li>Delete - Delete data from a dataset within the GS Platform.</li> <li>Identities - For accessing the Identity API: create, edit, delete, and retrieve information about identities in the GS Platform.</li> <li>Info - For accessing versioning and API information.</li> <li>Ingest - For accessing the Import API: ingest data into the GS Platform.</li> <li>Query - For accessing the Query V1 API: query datasets in the GS Platform.</li> <li>Users - For accessing the Users API: create, edit, delete, and retrieve information about users in the GS Platform.</li> </ul> <p>Services are namespaced within the <code>dfi.Client()</code>. As an example, the <code>Info()</code> class is accessed via <code>dfi.info</code>.</p> <pre><code>from dfi import Client\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\ndfi.info.version()\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#dfi","title":"dfi","text":"<p>Allows access to submodules from dfi namespace.</p>"},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#dfi.client","title":"client","text":"<p>Class composition of all the other classes, to access the wrappers with syntactic sugar.</p>"},{"location":"reference/client/#dfi.client.Client","title":"Client","text":"<pre><code>Client(\n    api_token: str,\n    base_url: str | None = None,\n    query_timeout: int | None = 60,\n    progress_bar: bool | None = False,\n)\n</code></pre> <p>Collection of GS Platform services.</p> <p>Parameters:</p> Name Type Description Default <code>api_token</code> <code>str</code> <p>a unique token.</p> required <code>base_url</code> <code>str | None</code> <p>where the GS Platform is located.</p> <code>None</code> <code>query_timeout</code> <code>int | None</code> <p>will timeout if no response within this many seconds.</p> <code>60</code> <code>progress_bar</code> <code>bool | None</code> <p>if <code>True</code>, will show a progress bar.</p> <code>False</code> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n</code></pre> Source code in <code>dfi/client.py</code> <pre><code>def __init__(\n    self,\n    api_token: str,\n    base_url: str | None = None,\n    query_timeout: int | None = 60,\n    progress_bar: bool | None = False,\n) -&gt; None:\n    \"\"\"Create a connection to GS Platform services.\n\n    Parameters\n    ----------\n    api_token:\n        a unique token.\n    base_url:\n        where the GS Platform is located.\n    query_timeout:\n        will timeout if no response within this many seconds.\n    progress_bar:\n        if `True`, will show a progress bar.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    ```\n    \"\"\"\n    self.conn = Connect(\n        api_token=api_token,\n        base_url=base_url,\n        query_timeout=query_timeout,\n        progress_bar=progress_bar,\n    )\n    self.datasets = Datasets(self.conn)\n    self.identities = Identities(self.conn)\n    self.info = Info(self.conn)\n    self.ingest = Ingest(self.conn)\n    self.users = Users(self.conn)\n    self.query = Query(self.conn)\n</code></pre>"},{"location":"reference/connect/","title":"Connect","text":""},{"location":"reference/connect/#dfi.connect","title":"connect","text":"<p>Class to connect to the DFI server.</p>"},{"location":"reference/connect/#dfi.connect.Connect","title":"Connect","text":"<pre><code>Connect(\n    api_token: str,\n    base_url: str | None = None,\n    query_timeout: int | None = 60,\n    progress_bar: bool | None = False,\n)\n</code></pre> <p>Class instantiating the connectors to the DFI API.</p> <p>Parameters:</p> Name Type Description Default <code>api_token</code> <code>str</code> required <code>base_url</code> <code>str | None</code> <code>None</code> <code>query_timeout</code> <code>int | None</code> <code>60</code> <code>progress_bar</code> <code>bool | None</code> <code>False</code> <p>Examples:</p> <pre><code>connection = dfi.Connect(\"&lt;token&gt;\", \"&lt;base_url&gt;\")\n</code></pre> Source code in <code>dfi/connect.py</code> <pre><code>def __init__(\n    self,\n    api_token: str,\n    base_url: str | None = None,\n    query_timeout: int | None = 60,\n    progress_bar: bool | None = False,\n) -&gt; None:\n    self.api_token = api_token\n    self.base_url = base_url\n    self.query_timeout = query_timeout\n    self.streaming_headers = {\n        \"Authorization\": f\"Bearer {api_token}\",\n        \"Accept\": \"text/event-stream\",\n    }\n    self.synchronous_headers = {\n        \"Authorization\": f\"Bearer {api_token}\",\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n    }\n    self.progress_bar = progress_bar\n</code></pre>"},{"location":"reference/connect/#dfi.connect.Connect.api_delete","title":"api_delete","text":"<pre><code>api_delete(\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,\n    json: dict | list | None = None,\n    data: dict | None = None,\n) -&gt; Response\n</code></pre> <p>Wrap requests.delete method.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of the URL.  Will be added as a suffix to the base_url.</p> required <code>stream</code> <code>bool</code> <p>Whether to use streaming headers or synchronous headers.</p> <code>True</code> <code>params</code> <code>dict | None</code> <p>Dictionary, list of tuples or bytes to send in the query string for the request.</p> <code>None</code> <code>data</code> <code>dict | None</code> <p>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request</p> <code>None</code> <code>json</code> <code>dict | list | None</code> <p>A JSON serializable Python object to send in the body of the request.  Will set the \"Content-Type: application/json\" in the header.</p> <code>None</code> Source code in <code>dfi/connect.py</code> <pre><code>def api_delete(\n    self,\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,  # type: ignore\n    json: dict | list | None = None,  # type: ignore\n    data: dict | None = None,  # type: ignore\n) -&gt; requests.models.Response:\n    \"\"\"Wrap requests.delete method.\n\n    Parameters\n    ----------\n    endpoint:\n        The endpoint of the URL.  Will be added as a suffix to the base_url.\n    stream:\n        Whether to use streaming headers or synchronous headers.\n    params:\n        Dictionary, list of tuples or bytes to send in the query string for the request.\n    data:\n        Dictionary, list of tuples, bytes, or file-like object to send in the body of the request\n    json:\n        A JSON serializable Python object to send in the body of the request.  Will set the\n        \"Content-Type: application/json\" in the header.\n    \"\"\"\n    headers = self.streaming_headers if stream else self.synchronous_headers\n\n    url = f\"{self.base_url}/{endpoint}\"\n    response = requests.delete(\n        url,\n        headers=headers,\n        json=json,\n        data=data,\n        stream=stream,\n        params=params,\n        timeout=self.query_timeout,\n    )\n    validate.response(response, url, headers, params, json)\n    return response\n</code></pre>"},{"location":"reference/connect/#dfi.connect.Connect.api_get","title":"api_get","text":"<pre><code>api_get(\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,\n) -&gt; Response\n</code></pre> <p>Wrap requests.get method.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of the URL.  Will be added as a suffix to the base_url.</p> required <code>stream</code> <code>bool</code> <p>Whether to use streaming headers or synchronous headers.</p> <code>True</code> <code>params</code> <code>dict | None</code> <p>Dictionary, list of tuples or bytes to send in the query string for the request.</p> <code>None</code> Source code in <code>dfi/connect.py</code> <pre><code>def api_get(\n    self,\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,  # type: ignore\n) -&gt; requests.models.Response:\n    \"\"\"Wrap requests.get method.\n\n    Parameters\n    ----------\n    endpoint:\n        The endpoint of the URL.  Will be added as a suffix to the base_url.\n    stream:\n        Whether to use streaming headers or synchronous headers.\n    params:\n        Dictionary, list of tuples or bytes to send in the query string for the request.\n    \"\"\"\n    headers = self.streaming_headers if stream else self.synchronous_headers\n    url = f\"{self.base_url}/{endpoint}\"\n    _logger.debug(\n        dict(\n            url=url,\n            headers=headers,\n            stream=stream,\n            params=params,\n            timeout=self.query_timeout,\n        )\n    )\n    response = requests.get(\n        url,\n        headers=headers,\n        stream=stream,\n        params=params,\n        timeout=self.query_timeout,\n    )\n\n    validate.response(response, url, headers, params)\n    return response\n</code></pre>"},{"location":"reference/connect/#dfi.connect.Connect.api_patch","title":"api_patch","text":"<pre><code>api_patch(\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,\n    json: dict | None = None,\n    data: dict | None = None,\n) -&gt; Response\n</code></pre> <p>Wrap requests.patch method.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of the URL.  Will be added as a suffix to the base_url.</p> required <code>stream</code> <code>bool</code> <p>Whether to use streaming headers or synchronous headers.</p> <code>True</code> <code>params</code> <code>dict | None</code> <p>Dictionary, list of tuples or bytes to send in the query string for the request.</p> <code>None</code> <code>data</code> <code>dict | None</code> <p>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request</p> <code>None</code> <code>json</code> <code>dict | None</code> <p>A JSON serializable Python object to send in the body of the request.  Will set the \"Content-Type: application/json\" in the header.</p> <code>None</code> Source code in <code>dfi/connect.py</code> <pre><code>def api_patch(\n    self,\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,  # type: ignore\n    json: dict | None = None,  # type: ignore\n    data: dict | None = None,  # type: ignore\n) -&gt; requests.models.Response:\n    \"\"\"Wrap requests.patch method.\n\n    Parameters\n    ----------\n    endpoint:\n        The endpoint of the URL.  Will be added as a suffix to the base_url.\n    stream:\n        Whether to use streaming headers or synchronous headers.\n    params:\n        Dictionary, list of tuples or bytes to send in the query string for the request.\n    data:\n        Dictionary, list of tuples, bytes, or file-like object to send in the body of the request\n    json:\n        A JSON serializable Python object to send in the body of the request.  Will set the\n        \"Content-Type: application/json\" in the header.\n    \"\"\"\n    headers = self.streaming_headers if stream else self.synchronous_headers\n    url = f\"{self.base_url}/{endpoint}\"\n\n    response = requests.patch(\n        url,\n        headers=headers,\n        json=json,\n        data=data,\n        stream=stream,\n        params=params,\n        timeout=self.query_timeout,\n    )\n    validate.response(response, url, headers, params, json)\n    return response\n</code></pre>"},{"location":"reference/connect/#dfi.connect.Connect.api_post","title":"api_post","text":"<pre><code>api_post(\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,\n    json: dict | list | None = None,\n    data: dict | None = None,\n) -&gt; Response\n</code></pre> <p>Wrap requests.post method.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of the URL.  Will be added as a suffix to the base_url.</p> required <code>stream</code> <code>bool</code> <p>Whether to use streaming headers or synchronous headers.</p> <code>True</code> <code>params</code> <code>dict | None</code> <p>Dictionary, list of tuples or bytes to send in the query string for the request.</p> <code>None</code> <code>data</code> <code>dict | None</code> <p>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request</p> <code>None</code> <code>json</code> <code>dict | list | None</code> <p>A JSON serializable Python object to send in the body of the request.  Will set the \"Content-Type: application/json\" in the header.</p> <code>None</code> Source code in <code>dfi/connect.py</code> <pre><code>def api_post(\n    self,\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,  # type: ignore\n    json: dict | list | None = None,  # type: ignore\n    data: dict | None = None,  # type: ignore\n) -&gt; requests.models.Response:\n    \"\"\"Wrap requests.post method.\n\n    Parameters\n    ----------\n    endpoint:\n        The endpoint of the URL.  Will be added as a suffix to the base_url.\n    stream:\n        Whether to use streaming headers or synchronous headers.\n    params:\n        Dictionary, list of tuples or bytes to send in the query string for the request.\n    data:\n        Dictionary, list of tuples, bytes, or file-like object to send in the body of the request\n    json:\n        A JSON serializable Python object to send in the body of the request.  Will set the\n        \"Content-Type: application/json\" in the header.\n    \"\"\"\n    headers = self.streaming_headers if stream else self.synchronous_headers\n    url = f\"{self.base_url}/{endpoint}\"\n\n    response = requests.post(\n        url,\n        headers=headers,\n        json=json,\n        data=data,\n        stream=stream,\n        params=params,\n        timeout=self.query_timeout,\n    )\n    validate.response(response, url, headers, params, json)\n    return response\n</code></pre>"},{"location":"reference/connect/#dfi.connect.Connect.api_put","title":"api_put","text":"<pre><code>api_put(\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,\n    json: dict | None = None,\n    data: dict | None = None,\n) -&gt; Response\n</code></pre> <p>Wrap requests.put method.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of the URL.  Will be added as a suffix to the base_url.</p> required <code>stream</code> <code>bool</code> <p>Whether to use streaming headers or synchronous headers.</p> <code>True</code> <code>params</code> <code>dict | None</code> <p>Dictionary, list of tuples or bytes to send in the query string for the request.</p> <code>None</code> <code>data</code> <code>dict | None</code> <p>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request</p> <code>None</code> <code>json</code> <code>dict | None</code> <p>A JSON serializable Python object to send in the body of the request.  Will set the \"Content-Type: application/json\" in the header.</p> <code>None</code> Source code in <code>dfi/connect.py</code> <pre><code>def api_put(\n    self,\n    endpoint: str,\n    stream: bool = True,\n    params: dict | None = None,  # type: ignore\n    json: dict | None = None,  # type: ignore\n    data: dict | None = None,  # type: ignore\n) -&gt; requests.models.Response:\n    \"\"\"Wrap requests.put method.\n\n    Parameters\n    ----------\n    endpoint:\n        The endpoint of the URL.  Will be added as a suffix to the base_url.\n    stream:\n        Whether to use streaming headers or synchronous headers.\n    params:\n        Dictionary, list of tuples or bytes to send in the query string for the request.\n    data:\n        Dictionary, list of tuples, bytes, or file-like object to send in the body of the request\n    json:\n        A JSON serializable Python object to send in the body of the request.  Will set the\n        \"Content-Type: application/json\" in the header.\n    \"\"\"\n    headers = self.streaming_headers if stream else self.synchronous_headers\n    url = f\"{self.base_url}/{endpoint}\"\n\n    response = requests.put(\n        url,\n        headers=headers,\n        json=json,\n        data=data,\n        stream=stream,\n        params=params,\n        timeout=self.query_timeout,\n    )\n    validate.response(response, url, headers, params, json)\n    return response\n</code></pre>"},{"location":"reference/errors/","title":"Errors","text":""},{"location":"reference/errors/#dfi.errors","title":"errors","text":"<p>Enumerated errors for possible DFI errors that may arise.</p> Note <p>Errors and Warnings prefixed with <code>DFI</code> (e.g. <code>DFI&lt;name&gt;Error</code>) indicates it  originates from within the GS Platform API.</p>"},{"location":"reference/errors/#dfi.errors.AltitudeOutOfBoundsError","title":"AltitudeOutOfBoundsError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when an altitude value is not within (<code>-1.7976931348623157e308 &lt; altitude &lt; 1.7976931348623157e308</code>).</p>"},{"location":"reference/errors/#dfi.errors.BBoxLatitudeMismatchError","title":"BBoxLatitudeMismatchError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when <code>min_lat &gt;= max_lat</code>.</p>"},{"location":"reference/errors/#dfi.errors.BBoxLongitudeMismatchError","title":"BBoxLongitudeMismatchError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when <code>min_lon &gt;= max_lon</code>.</p>"},{"location":"reference/errors/#dfi.errors.BBoxUndefinedError","title":"BBoxUndefinedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a BBox is uninitialized.</p>"},{"location":"reference/errors/#dfi.errors.BBoxValueError","title":"BBoxValueError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when more than 4 values are used to create a BBox.</p>"},{"location":"reference/errors/#dfi.errors.DFIResponseError","title":"DFIResponseError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when an error propagated back from the DFI API.</p>"},{"location":"reference/errors/#dfi.errors.EventsMissedError","title":"EventsMissedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a fewer events are received than were sent.</p>"},{"location":"reference/errors/#dfi.errors.FilterFieldInvalidNullability","title":"FilterFieldInvalidNullability","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Filter Field nullability does not match the schema definition.</p>"},{"location":"reference/errors/#dfi.errors.FilterFieldNameNotInSchema","title":"FilterFieldNameNotInSchema","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Filter Field is given a name that is not in the dataset schema.</p>"},{"location":"reference/errors/#dfi.errors.FilterFieldOperationValueError","title":"FilterFieldOperationValueError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Filter Field operation is not a valid value for the field type.</p>"},{"location":"reference/errors/#dfi.errors.FilterFieldTypeError","title":"FilterFieldTypeError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Filter Field value is not a valid value for the field type.</p>"},{"location":"reference/errors/#dfi.errors.FilterFieldValueError","title":"FilterFieldValueError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Filter Field value is not a valid value for the field type.</p>"},{"location":"reference/errors/#dfi.errors.InvalidQueryDocument","title":"InvalidQueryDocument","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a QueryDocument is invalid.</p>"},{"location":"reference/errors/#dfi.errors.LatitudeOutOfBoundsError","title":"LatitudeOutOfBoundsError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a latitude value is not within (-90.0 &lt; latitude &lt; 90.0).</p>"},{"location":"reference/errors/#dfi.errors.LinearRingError","title":"LinearRingError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Polygon is not a linear ring (&lt;4 points).</p>"},{"location":"reference/errors/#dfi.errors.LongitudeOutOfBoundsError","title":"LongitudeOutOfBoundsError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a longitude value is not within (-180.0 &lt; longitude &lt; 180.0).</p>"},{"location":"reference/errors/#dfi.errors.NoEventsRecievedError","title":"NoEventsRecievedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when 0 events received from the DFI API.</p>"},{"location":"reference/errors/#dfi.errors.NoFinishMessageReceivedError","title":"NoFinishMessageReceivedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a stream ends without receving a 'finish' event.</p>"},{"location":"reference/errors/#dfi.errors.PolygonNotClosedError","title":"PolygonNotClosedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Polygon not closed (first point is identical to last point).</p>"},{"location":"reference/errors/#dfi.errors.PolygonUndefinedError","title":"PolygonUndefinedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a Polygon is uninitialized.</p>"},{"location":"reference/errors/#dfi.errors.TimeRangeMismatchError","title":"TimeRangeMismatchError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when <code>min_time &gt; max_time</code>.</p>"},{"location":"reference/errors/#dfi.errors.TimeRangeOutOfBoundsError","title":"TimeRangeOutOfBoundsError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a TimeRange value is not within.</p> <ul> <li>datetime form:          (<code>1970-01-01 00:00:00+00:00 &lt;= datetime &lt;= 2038-01-19 03:14:08+00:00</code>)</li> <li>unix epoch millis form: (<code>0 &lt;= datetime &lt;= 2,147,483,647</code>)</li> </ul>"},{"location":"reference/errors/#dfi.errors.TimeRangeUndefinedError","title":"TimeRangeUndefinedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a TimeRange is uninitialized.</p>"},{"location":"reference/errors/#dfi.errors.TimeZoneUndefinedError","title":"TimeZoneUndefinedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a TimeRange is defined without specifying a timezone.</p>"},{"location":"reference/errors/#dfi.errors.UnkownMessageReceivedError","title":"UnkownMessageReceivedError","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when an unknown Server Side Event message is received.</p>"},{"location":"reference/errors/#dfi.errors.UnreachableError","title":"UnreachableError","text":"<p>             Bases: <code>Exception</code></p> <p>Indicates a section of code was reached that should be unreachable.</p>"},{"location":"reference/validate/","title":"Validate","text":""},{"location":"reference/validate/#dfi.validate","title":"validate","text":"<p>Validation and error formatting for DFI responses.</p>"},{"location":"reference/validate/#dfi.validate.response","title":"response","text":"<pre><code>response(\n    resp: Response,\n    url: str,\n    headers: dict,\n    params: dict | None = None,\n    payload: dict | list | None = None,\n) -&gt; None\n</code></pre> <p>Log the response of a request with the given parameters. Raise an error if status code is not 20x.</p> <p>Parameters:</p> Name Type Description Default <code>resp</code> <code>Response</code> <p>a response object</p> required <code>url</code> <code>str</code> <p>the queried url</p> required <code>headers</code> <code>dict</code> <p>request headers</p> required <code>params</code> <code>dict | None</code> <p>request params</p> <code>None</code> <code>payload</code> <code>dict | list | None</code> <p>request payload</p> <code>None</code> <p>Raises:</p> Type Description <code>DFIResponseError</code> <p>If there was an error querying the DFI API.</p> Source code in <code>dfi/validate.py</code> <pre><code>def response(\n    resp: requests.models.Response,\n    url: str,\n    headers: dict,\n    params: dict | None = None,\n    payload: dict | list | None = None,\n) -&gt; None:\n    \"\"\"Log the response of a request with the given parameters. Raise an error if status code is not 20x.\n\n    Parameters\n    ----------\n    resp:\n        a response object\n    url:\n        the queried url\n    headers:\n        request headers\n    params:\n        request params\n    payload:\n        request payload\n\n    Raises\n    ------\n    DFIResponseError\n        If there was an error querying the DFI API.\n    \"\"\"\n    # prevent from showing the user token to terminal and logs\n    headers = headers.copy()\n    headers[\"Authorization\"] = \"Bearer XXX\"\n\n    msg = f\"\"\"\nSTATUS CODE: {resp.status_code}\nERROR: {resp.text}\nURL: {url}\nHEADERS: {json.dumps(headers, sort_keys=True, indent=4)}\nPARAMS: {json.dumps(params, sort_keys=True, indent=4)}\n\"\"\"\n    if payload is not None:\n        msg += f\"PAYLOAD: {json.dumps(payload, sort_keys=True, indent=4)}\"\n    else:\n        msg += f\"PAYLOAD: {json.dumps(None)}\"\n\n    if int(resp.status_code // 100) != SUCCESS_CODES:  # any code 2xx is a valid success response code\n        _logger.error(msg)\n        raise DFIResponseError(msg)\n\n    _logger.debug(msg)\n</code></pre>"},{"location":"reference/models/query_document/","title":"Query document","text":""},{"location":"reference/models/query_document/#dfi.models.query_document","title":"query_document","text":"<p>A QueryDocument describes a query.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument","title":"QueryDocument","text":"<pre><code>QueryDocument(\n    dataset_id: str,\n    return_model: Records | Count,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n    only: Only | str | None = None,\n)\n</code></pre> <p>A high level interface for declaring a DFI API Query.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def __init__(\n    self,\n    dataset_id: str,\n    return_model: Records | Count,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n    only: Only | str | None = None,\n) -&gt; None:\n    \"\"\"Initialize a QueryDocument.\"\"\"\n    self._dataset_id: str\n    self._return_model: Records | Count\n    self._uids: list[str | int] | None = None\n    self._geometry: Polygon | BBox | None = None\n    self._time_range: TimeRange | None = None\n    self._only: Only | None = None\n    self._filter_fields: list[FilterField] | None = None\n\n    self._document: dict[str, Any] = {\"filters\": {}}\n    self.set_dataset_id(dataset_id)\n    self.set_return_model(return_model)\n    self.set_uids(uids)\n    self.set_geometry(geometry)\n    self.set_time_range(time_range)\n    self.set_only(only)\n    self.set_filter_fields(filter_fields)\n\n    self.validate()\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.dataset_id","title":"dataset_id  <code>property</code>","text":"<pre><code>dataset_id: str | None\n</code></pre> <p>The dataset_id property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.filter_fields","title":"filter_fields  <code>property</code>","text":"<pre><code>filter_fields: list[FilterField] | None\n</code></pre> <p>The filter_fields property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.geometry","title":"geometry  <code>property</code>","text":"<pre><code>geometry: Polygon | BBox | None\n</code></pre> <p>The geometry property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.only","title":"only  <code>property</code>","text":"<pre><code>only: Only | None\n</code></pre> <p>The only property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.return_model","title":"return_model  <code>property</code>","text":"<pre><code>return_model: Records | Count\n</code></pre> <p>The return_model property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.time_range","title":"time_range  <code>property</code>","text":"<pre><code>time_range: TimeRange | None\n</code></pre> <p>The time_range property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.uids","title":"uids  <code>property</code>","text":"<pre><code>uids: list[str | int] | None\n</code></pre> <p>The uids property.</p>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.build","title":"build","text":"<pre><code>build() -&gt; dict\n</code></pre> <p>Return a formatted Query Document.</p> <p>Returns:</p> Name Type Description <code>document</code> <code>dict</code> <p>formatted  Query Document</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"Return a formatted Query Document.\n\n    Returns\n    -------\n    document:\n        formatted  Query Document\n    \"\"\"\n    self.validate()\n    return dict(sorted(self._document.items(), key=lambda x: x[0]))\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_dataset_id","title":"set_dataset_id","text":"<pre><code>set_dataset_id(dataset_id: str) -&gt; Self\n</code></pre> <p>Set the dataset_id property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_dataset_id(self, dataset_id: str) -&gt; Self:\n    \"\"\"Set the dataset_id property.\"\"\"\n    self._validate_dataset_id(dataset_id)\n\n    match dataset_id:\n        case str():\n            self._dataset_id = dataset_id\n            self._document[DATASET_ID] = dataset_id\n        case _:\n            raise ValueError(\"dataset_id must be of type str.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_filter_field","title":"set_filter_field","text":"<pre><code>set_filter_field(filter_field: FilterField) -&gt; Self\n</code></pre> <p>Set a filter field.</p> <ul> <li>An existing FilterField will be overwritten by a new FilterField with the same name.</li> <li>Possibility that more fields can be set than are allowed.  The API will catch this error.</li> </ul> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_filter_field(self, filter_field: FilterField) -&gt; Self:\n    \"\"\"Set a filter field.\n\n    - An existing FilterField will be overwritten by a new FilterField with the same name.\n    - Possibility that more fields can be set than are allowed.  The API will catch this error.\n    \"\"\"\n    match filter_field:\n        case FilterField():\n            if self._document[FILTERS].get(FILTER_FIELDS) is None:\n                self._document[FILTERS][FILTER_FIELDS] = {}\n\n            self._document[FILTERS][FILTER_FIELDS].update(filter_field.build())\n        case _:\n            raise ValueError(\"filter_field must be of type FilterField.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_filter_fields","title":"set_filter_fields","text":"<pre><code>set_filter_fields(\n    filter_fields: list[FilterField] | None,\n) -&gt; Self\n</code></pre> <p>Set a filter field.</p> <ul> <li>An existing FilterField will be overwritten by a new FilterField with the same name.</li> <li>Possibility that more fields can be set than are allowed.  The API will catch this error.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>filter_fields</code> <code>list[FilterField] | None</code> <ul> <li>If <code>list[FilterField]</code>, will iteratively add each field.</li> <li>If <code>None</code>, will delete all existing filter fields.</li> </ul> required Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_filter_fields(self, filter_fields: list[FilterField] | None) -&gt; Self:\n    \"\"\"Set a filter field.\n\n    - An existing FilterField will be overwritten by a new FilterField with the same name.\n    - Possibility that more fields can be set than are allowed.  The API will catch this error.\n\n    Parameters\n    ----------\n    filter_fields:\n\n        - If `list[FilterField]`, will iteratively add each field.\n        - If `None`, will delete all existing filter fields.\n    \"\"\"\n    match filter_fields:\n        case list():\n            for field in filter_fields:\n                self.set_filter_field(field)\n        case None:\n            self._filter_fields = None\n            self._document[FILTERS].pop(FILTER_FIELDS, None)\n        case _:\n            raise ValueError(\"filter_field must be of type list[FilterField] | None.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_geometry","title":"set_geometry","text":"<pre><code>set_geometry(geometry: Polygon | BBox | None) -&gt; Self\n</code></pre> <p>Set the geometry property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_geometry(self, geometry: Polygon | BBox | None) -&gt; Self:\n    \"\"\"Set the geometry property.\"\"\"\n    match geometry:\n        case Polygon() | BBox():\n            self._geometry = geometry\n            self._document[FILTERS][GEOMETRY] = geometry.build()\n        case None:\n            self._geometry = geometry\n            self._document[FILTERS].pop(GEOMETRY, None)\n        case _:\n            raise ValueError(\"geometry must be of type Polygon | BBox | None.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_only","title":"set_only","text":"<pre><code>set_only(only: Only | str | None) -&gt; Self\n</code></pre> <p>Set the only property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_only(self, only: Only | str | None) -&gt; Self:\n    \"\"\"Set the only property.\"\"\"\n    self._validate_only_filter(only, self._return_model)\n\n    match only:\n        case Only():\n            self._only = only\n            self._document[FILTERS][ONLY] = self._only.build()\n        case str():\n            self._only = Only(only)\n            self._document[FILTERS][ONLY] = self._only.build()\n        case None:\n            self._only = only\n            self._document[FILTERS].pop(ONLY, None)\n        case _:\n            raise ValueError(\"only must be of type Only | None.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_return_model","title":"set_return_model","text":"<pre><code>set_return_model(return_model: Records | Count) -&gt; Self\n</code></pre> <p>Set the return_model property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_return_model(self, return_model: Records | Count) -&gt; Self:\n    \"\"\"Set the return_model property.\"\"\"\n    self._validate_return_model(return_model)\n    self._validate_only_filter(self._only, return_model)\n\n    match return_model:\n        case Records() | Count():\n            self._return_model = return_model\n            self._document[RETURN_MODEL] = return_model.build()\n        case _:\n            raise ValueError(\"return_model must be of type ReturnModel.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_time_range","title":"set_time_range","text":"<pre><code>set_time_range(time_range: TimeRange | None) -&gt; Self\n</code></pre> <p>Set the time_range property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_time_range(self, time_range: TimeRange | None) -&gt; Self:\n    \"\"\"Set the time_range property.\"\"\"\n    match time_range:\n        case TimeRange():\n            self._time_range = time_range\n            self._document[FILTERS][TIME] = time_range.build()\n        case None:\n            self._time_range = time_range\n            self._document[FILTERS].pop(TIME, None)\n        case _:\n            raise ValueError(\"time_range must be of type TimeRange | None.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.set_uids","title":"set_uids","text":"<pre><code>set_uids(uids: list[str | int] | None) -&gt; Self\n</code></pre> <p>Set the uids property.</p> Source code in <code>dfi/models/query_document.py</code> <pre><code>def set_uids(self, uids: list[str | int] | None) -&gt; Self:\n    \"\"\"Set the uids property.\"\"\"\n    match uids:\n        case list():\n            self._uids = uids\n            self._document[FILTERS][IDS] = uids\n        case None:\n            self._uids = uids\n            self._document[FILTERS].pop(IDS, None)\n        case _:\n            raise ValueError(\"uids must be of type list[str | int].\")\n\n    return self\n</code></pre>"},{"location":"reference/models/query_document/#dfi.models.query_document.QueryDocument.validate","title":"validate","text":"<pre><code>validate() -&gt; Self\n</code></pre> <p>Validate the QueryDocument.</p> <p>Raises:</p> Type Description <code>InvalidQueryDocument</code> Source code in <code>dfi/models/query_document.py</code> <pre><code>def validate(self) -&gt; Self:\n    \"\"\"Validate the QueryDocument.\n\n    Raises\n    ------\n    InvalidQueryDocument\n    \"\"\"\n    self._validate_dataset_id(self._dataset_id)\n    self._validate_return_model(self._return_model)\n    self._validate_only_filter(self._only, self._return_model)\n\n    return self\n</code></pre>"},{"location":"reference/models/filters/filter_fields/","title":"Filter fields","text":""},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields","title":"filter_fields","text":"<p>FilterField filter model definition.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FieldType","title":"FieldType","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the valid types for a FilterField.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField","title":"FilterField","text":"<pre><code>FilterField(\n    name: str,\n    field_type: FieldType,\n    value: FieldValue,\n    operation: FilterOperator,\n    nullable: bool = False,\n    schema: dict | None = None,\n)\n</code></pre> <p>Provides type deifnition and validation for defining how to filter on FilterFields in a dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the field.  This should match a name in the dataset schema.</p> required <code>field_type</code> <code>FieldType</code> <p>Type of the FilterField.</p> required <code>value</code> <code>FieldValue</code> <p>The value to use as a comparison.</p> required <code>operation</code> <code>FilterOperator</code> <p>How to filter on the field. Default <code>False</code></p> required <code>nullable</code> <code>bool</code> <p>If <code>True</code> the field can have null values, if <code>False</code> will error on null values.</p> <code>False</code> <code>schema</code> <code>dict | None</code> <p>Dataset schema, if present, will validate the Filter Field against the schema. Field validation does not cover all cases.  Some problems can only be caught by the DFI API.</p> <code>None</code> <p>Examples:</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField--filterfield","title":"FilterField","text":"<p><pre><code>FilterField(\"vegetables\", \"enum\")\n</code></pre> <pre><code>FilterField([0.0, 0.0, 1.0, 1.0])\n</code></pre></p> Source code in <code>dfi/models/filters/filter_fields.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    field_type: FieldType,\n    value: FieldValue,\n    operation: FilterOperator,\n    nullable: bool = False,\n    schema: dict | None = None,\n) -&gt; None:\n    \"\"\"Create a FilterField.\n\n    Parameters\n    ----------\n    name:\n        Name of the field.  This should match a name in the dataset schema.\n    field_type:\n        Type of the FilterField.\n    value:\n        The value to use as a comparison.\n    operation:\n        How to filter on the field. Default `False`\n    nullable:\n        If `True` the field can have null values, if `False` will error on null values.\n    schema:\n        Dataset schema, if present, will validate the Filter Field against the schema.\n        Field validation does not cover all cases.  Some problems can only be caught by the DFI API.\n\n    Examples\n    --------\n    ### FilterField\n    ```python\n    FilterField(\"vegetables\", \"enum\")\n    ```\n    ```python\n    FilterField([0.0, 0.0, 1.0, 1.0])\n    ```\n    \"\"\"\n    self._name = name\n    self._field_type = field_type\n    self._value = value\n    self._operation = operation\n    self._nullable = nullable\n\n    self.validate(schema)\n</code></pre>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.field_type","title":"field_type  <code>property</code>","text":"<pre><code>field_type: FieldType\n</code></pre> <p>The field_type property.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name property.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.nullable","title":"nullable  <code>property</code>","text":"<pre><code>nullable: bool\n</code></pre> <p>The nullable property.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.operation","title":"operation  <code>property</code>","text":"<pre><code>operation: FilterOperator\n</code></pre> <p>The operation property.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.value","title":"value  <code>property</code>","text":"<pre><code>value: FieldValue\n</code></pre> <p>The value property.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.build","title":"build","text":"<pre><code>build() -&gt; dict\n</code></pre> <p>Format the FilterField for use in Query Document.</p> Source code in <code>dfi/models/filters/filter_fields.py</code> <pre><code>def build(self) -&gt; dict:\n    \"\"\"Format the FilterField for use in Query Document.\"\"\"\n    return {\n        self._name: {\n            self._operation.build(): self._value,\n        }\n    }\n</code></pre>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterField.validate","title":"validate","text":"<pre><code>validate(schema: dict | None) -&gt; Self\n</code></pre> <p>Validate the Filter Field.</p> <p>Parameters:</p> Name Type Description Default <code>schema</code> <code>dict | None</code> <p>Dataset schema, if present, will validate the Filter Field against the schema.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>Raises:</p> Type Description <code>FilterFieldNameNotInSchema</code> <code>FilterFieldValueError</code> <code>FilterFieldOperationValueError</code> Source code in <code>dfi/models/filters/filter_fields.py</code> <pre><code>def validate(self, schema: dict | None) -&gt; Self:\n    \"\"\"Validate the Filter Field.\n\n    Parameters\n    ----------\n    schema:\n        Dataset schema, if present, will validate the Filter Field against the schema.\n\n    Returns\n    -------\n    Self\n\n    Raises\n    ------\n    FilterFieldNameNotInSchema\n    FilterFieldValueError\n    FilterFieldOperationValueError\n    \"\"\"\n    match self._field_type:\n        case FieldType():\n            pass\n        case _:\n            raise ValueError(f\"Expected FilterType, found '{type(self._operation)}'\")\n\n    match self._operation:\n        case FilterOperator():\n            pass\n        case _:\n            raise ValueError(f\"Expected FilterOperator, found '{type(self._operation)}'\")\n\n    self._filter_field_operation_is_valid(self._field_type, self._operation)\n\n    if schema:\n        _logger.info(\"No schema provided skipping validation on field name and nullability.\")\n        self._validate_filter_field_name_in_schema(self._name, schema)\n        self._validate_filter_field_type_matches_schema(self._name, self._field_type, schema)\n        self._validate_filter_field_nullability(self._name, self._nullable, schema)\n        self._filter_field_value_is_valid(self._name, self._value, schema)\n\n    return self\n</code></pre>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterOperator","title":"FilterOperator","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the valid operations on FilterFields.</p>"},{"location":"reference/models/filters/filter_fields/#dfi.models.filters.filter_fields.FilterOperator.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre> <p>Return a FilterOperator definition for QueryDocument.</p> Source code in <code>dfi/models/filters/filter_fields.py</code> <pre><code>def build(self) -&gt; str:\n    \"\"\"Return a FilterOperator definition for QueryDocument.\"\"\"\n    return str(self)\n</code></pre>"},{"location":"reference/models/filters/only/","title":"Only","text":""},{"location":"reference/models/filters/only/#dfi.models.filters.only","title":"only","text":"<p>Only filter model definition.</p>"},{"location":"reference/models/filters/only/#dfi.models.filters.only.Only","title":"Only","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the valid types for a Only filter..</p>"},{"location":"reference/models/filters/only/#dfi.models.filters.only.Only.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre> <p>Return an Only filter definition for QueryDocument.</p> Source code in <code>dfi/models/filters/only.py</code> <pre><code>def build(self) -&gt; str:\n    \"\"\"Return an Only filter definition for QueryDocument.\"\"\"\n    return str(self)\n</code></pre>"},{"location":"reference/models/filters/time_range/","title":"Time range","text":""},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range","title":"time_range","text":"<p>TimeRange filter describes how to filter on time.</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange","title":"TimeRange","text":"<p>A TimeRange is a a way to bound time.</p> <p>If a bound (<code>min_time</code> or <code>max_time</code>) is None, then time in that direction is unbound i.e. bounds will \"expand\" to the first or last record in dataset based on timestamp.</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.max_time","title":"max_time  <code>property</code>","text":"<pre><code>max_time: datetime | None\n</code></pre> <p>The max_time property.</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.min_time","title":"min_time  <code>property</code>","text":"<pre><code>min_time: datetime | None\n</code></pre> <p>The min_time property.</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.build","title":"build","text":"<pre><code>build() -&gt; dict[str, str | None]\n</code></pre> <p>Validate the TimeRange is defined and format the TimeRange for use in Query Document.</p> Source code in <code>dfi/models/filters/time_range.py</code> <pre><code>def build(self) -&gt; dict[str, str | None]:\n    \"\"\"Validate the TimeRange is defined and format the TimeRange for use in Query Document.\"\"\"\n    self.validate()\n    min_time = None if self._min_time is None else self._min_time.isoformat()\n    max_time = None if self._max_time is None else self._max_time.isoformat()\n\n    return {\"maxTime\": max_time, \"minTime\": min_time}\n</code></pre>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_datetimes","title":"from_datetimes","text":"<pre><code>from_datetimes(\n    min_time: datetime | None = None,\n    max_time: datetime | None = None,\n) -&gt; Self\n</code></pre> <p>Create a TimeRange from <code>datetime</code> objects.</p> <p>Parameters:</p> Name Type Description Default <code>min_time</code> <code>datetime | None</code> <p>Lower time bound.</p> <code>None</code> <code>max_time</code> <code>datetime | None</code> <p>Upper time bound.</p> <code>None</code> <p>Returns:</p> Type Description <code>TimeRange</code> <p>Raises:</p> Type Description <code>TimeRangeUndefinedError</code> <code>TimeRangeMismatchError</code> <code>TypeError</code> <p>Examples:</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_datetimes--timerange-from-datetimes","title":"TimeRange From <code>datetime</code>s","text":"<p><pre><code>from datetime import datetime, timezone\n\nmin_time = datetime(\n    2020, 1, 1, 0, 0, 0, tzinfo=timezone.utc\n)\nmin_time = datetime(\n    2020, 1, 1, 0, 0, 1, tzinfo=timezone.utc\n)\n\nTimeRange().from_datetimes(min_time, max_time)\n</code></pre> <pre><code>TimeRange(2020-01-01T00:00:00, 2020-01-01T00:00:01)\n</code></pre></p> Source code in <code>dfi/models/filters/time_range.py</code> <pre><code>def from_datetimes(self, min_time: datetime | None = None, max_time: datetime | None = None) -&gt; Self:\n    \"\"\"Create a TimeRange from `datetime` objects.\n\n    Parameters\n    ----------\n    min_time:\n        Lower time bound.\n    max_time:\n        Upper time bound.\n\n    Returns\n    -------\n    TimeRange\n\n    Raises\n    ------\n    TimeRangeUndefinedError\n    TimeRangeMismatchError\n    TypeError\n\n    Examples\n    --------\n    ### TimeRange From `datetime`s\n    ```python\n    from datetime import datetime, timezone\n\n    min_time = datetime(\n        2020, 1, 1, 0, 0, 0, tzinfo=timezone.utc\n    )\n    min_time = datetime(\n        2020, 1, 1, 0, 0, 1, tzinfo=timezone.utc\n    )\n\n    TimeRange().from_datetimes(min_time, max_time)\n    ```\n    ```python\n    TimeRange(2020-01-01T00:00:00, 2020-01-01T00:00:01)\n    ```\n    \"\"\"\n    match min_time:\n        case datetime():\n            self._min_time = min_time\n        case None:\n            self._min_time = None\n        case _:\n            raise TypeError(f\"min_time should be of type str | None, found '{type(min_time)}'\")\n\n    match max_time:\n        case datetime():\n            self._max_time = max_time\n        case None:\n            self._max_time = None\n        case _:\n            raise TypeError(f\"max_time should be of type str | None, found '{type(max_time)}'\")\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_millis","title":"from_millis","text":"<pre><code>from_millis(\n    min_time: int | None = None,\n    max_time: int | None = None,\n    tz: timezone = timezone.utc,\n) -&gt; Self\n</code></pre> <p>Create a TimeRange from integers representing Unix Epoch in milliseconds.</p> <p>Parameters:</p> Name Type Description Default <code>min_time</code> <code>int | None</code> <p>Lower time bound.</p> <code>None</code> <code>max_time</code> <code>int | None</code> <p>Upper time bound.</p> <code>None</code> <code>tz</code> <code>timezone</code> <p>The timezone for the datetime.  Defaults to UTC.</p> <code>utc</code> <p>Returns:</p> Type Description <code>TimeRange</code> <p>Raises:</p> Type Description <code>TimeRangeUndefinedError</code> <code>TimeRangeMismatchError</code> <code>TypeError</code> <p>Examples:</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_millis--timerange-from-milliseconds-since-unix-epoch","title":"TimeRange From Milliseconds Since Unix Epoch","text":"<p><pre><code>TimeRange().from_millis(1577836800000, 1577836801000)\n</code></pre> <pre><code>TimeRange(2020-01-01T00:00:00.001000+00:00, 2020-01-01T00:00:01.001000+00:00)\n</code></pre></p> Source code in <code>dfi/models/filters/time_range.py</code> <pre><code>def from_millis(\n    self, min_time: int | None = None, max_time: int | None = None, tz: timezone = timezone.utc\n) -&gt; Self:\n    \"\"\"Create a TimeRange from integers representing Unix Epoch in milliseconds.\n\n    Parameters\n    ----------\n    min_time:\n        Lower time bound.\n    max_time:\n        Upper time bound.\n    tz:\n        The timezone for the datetime.  Defaults to UTC.\n\n    Returns\n    -------\n    TimeRange\n\n    Raises\n    ------\n    TimeRangeUndefinedError\n    TimeRangeMismatchError\n    TypeError\n\n    Examples\n    --------\n    ### TimeRange From Milliseconds Since Unix Epoch\n    ```python\n    TimeRange().from_millis(1577836800000, 1577836801000)\n    ```\n    ```python\n    TimeRange(2020-01-01T00:00:00.001000+00:00, 2020-01-01T00:00:01.001000+00:00)\n    ```\n    \"\"\"\n    match min_time:\n        case int():\n            self._min_time = datetime.fromtimestamp(min_time / 1000.0, tz)\n        case None:\n            self._min_time = None\n        case _:\n            raise TypeError(f\"min_time should be of type str | None, found '{type(min_time)}'\")\n\n    match max_time:\n        case int():\n            self._max_time = datetime.fromtimestamp(max_time / 1000.0, tz)\n        case None:\n            self._max_time = None\n        case _:\n            raise TypeError(f\"max_time should be of type str | None, found '{type(max_time)}'\")\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_strings","title":"from_strings","text":"<pre><code>from_strings(\n    min_time: str | None = None, max_time: str | None = None\n) -&gt; Self\n</code></pre> <p>Create a TimeRange from ISO 8601 strings.</p> <p>Parameters:</p> Name Type Description Default <code>min_time</code> <code>str | None</code> <p>Lower time bound.</p> <code>None</code> <code>max_time</code> <code>str | None</code> <p>Upper time bound.</p> <code>None</code> <p>Returns:</p> Type Description <code>TimeRange</code> <p>Raises:</p> Type Description <code>TimeRangeUndefinedError</code> <code>TimeRangeMismatchError</code> <code>TypeError</code> <p>Examples:</p> Attention <p>Creating datetimes from strings in Zulu time (e.g. <code>\"2024-02-06T10:41:54Z\"</code>) are not supported in Python 3.10</p>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.from_strings--timerange-from-strings","title":"TimeRange From Strings","text":"<p><pre><code>TimeRange().from_strings(\n    \"2020-01-01T00:00:00.001000+00:00\",\n    \"2020-01-01T00:00:01.001000+00:00\",\n)\n</code></pre> <pre><code>TimeRange(2020-01-01T00:00:00+01:00, 2020-01-01T00:00:01+01:00)\n</code></pre></p> Source code in <code>dfi/models/filters/time_range.py</code> <pre><code>def from_strings(self, min_time: str | None = None, max_time: str | None = None) -&gt; Self:\n    \"\"\"Create a TimeRange from [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) strings.\n\n    Parameters\n    ----------\n    min_time:\n        Lower time bound.\n    max_time:\n        Upper time bound.\n\n    Returns\n    -------\n    TimeRange\n\n    Raises\n    ------\n    TimeRangeUndefinedError\n    TimeRangeMismatchError\n    TypeError\n\n    Examples\n    --------\n    ??? attention\n\n        Creating datetimes from strings in Zulu time (e.g. `\"2024-02-06T10:41:54Z\"`) are not supported in Python 3.10\n\n\n    ### TimeRange From Strings\n    ```python\n    TimeRange().from_strings(\n        \"2020-01-01T00:00:00.001000+00:00\",\n        \"2020-01-01T00:00:01.001000+00:00\",\n    )\n    ```\n    ```python\n    TimeRange(2020-01-01T00:00:00+01:00, 2020-01-01T00:00:01+01:00)\n    ```\n    \"\"\"\n    match min_time:\n        case str():\n            self._min_time = datetime.fromisoformat(min_time)\n        case None:\n            self._min_time = None\n        case _:\n            raise TypeError(f\"min_time should be of type str | None, found '{type(min_time)}'\")\n\n    match max_time:\n        case str():\n            self._max_time = datetime.fromisoformat(max_time)\n        case None:\n            self._max_time = None\n        case _:\n            raise TypeError(f\"max_time should be of type str | None, found '{type(max_time)}'\")\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/time_range/#dfi.models.filters.time_range.TimeRange.validate","title":"validate","text":"<pre><code>validate() -&gt; Self\n</code></pre> <p>Validate the TimeRange bounds.</p> <p>Raises:</p> Type Description <code>TimeRangeUndefinedError</code> <code>TimeRangeMismatchError</code> Source code in <code>dfi/models/filters/time_range.py</code> <pre><code>def validate(self) -&gt; Self:\n    \"\"\"Validate the TimeRange bounds.\n\n    Raises\n    ------\n    TimeRangeUndefinedError\n    TimeRangeMismatchError\n    \"\"\"\n    if not (hasattr(self, \"_min_time\") or hasattr(self, \"_max_time\")):\n        raise TimeRangeUndefinedError\n\n    if (self._min_time is not None) and (self._max_time is not None):\n        if self._min_time &gt; self._max_time:\n            raise TimeRangeMismatchError\n\n        if (self._min_time.tzinfo is None) or (self._max_time.tzinfo is None):\n            raise TimeZoneUndefinedError\n\n        # TODO ask @matt what the limits (if any) are\n        # if self._min_time &lt; 0:\n        #     raise TimeRangeOutOfBoundsError(\n        #         f\"min_time value '{self._min_time}' not within ({DATETIME_MIN}, {DATETIME_MAX})\"\n        #     )\n        # if self._max_time &gt; 0:\n        #     raise TimeRangeOutOfBoundsError(\n        #         f\"max_time value '{self._max_time}' not within ({DATETIME_MIN}, {DATETIME_MAX})\"\n        #     )\n\n    return self\n</code></pre>"},{"location":"reference/models/filters/geometry/bbox/","title":"Bbox","text":""},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox","title":"bbox","text":"<p>BBox model definiton.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox","title":"BBox","text":"<p>A 2D BBox as defined in GeoJSON BBox.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.max_lat","title":"max_lat  <code>property</code>","text":"<pre><code>max_lat: float\n</code></pre> <p>The max_lat property.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.max_lon","title":"max_lon  <code>property</code>","text":"<pre><code>max_lon: float\n</code></pre> <p>The max_lon property.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.min_lat","title":"min_lat  <code>property</code>","text":"<pre><code>min_lat: float\n</code></pre> <p>The min_lat property.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.min_lon","title":"min_lon  <code>property</code>","text":"<pre><code>min_lon: float\n</code></pre> <p>The min_lon property.</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.build","title":"build","text":"<pre><code>build() -&gt; dict[str, str | Sequence[float]]\n</code></pre> <p>Validate the BBox is defined and format the BBox for use in Query Document.</p> Source code in <code>dfi/models/filters/geometry/bbox.py</code> <pre><code>def build(self) -&gt; dict[str, str | Sequence[float]]:\n    \"\"\"Validate the BBox is defined and format the BBox for use in Query Document.\"\"\"\n    self.validate()\n    return {\"type\": \"BoundingBox\", \"bounds\": (self._min_lon, self._min_lat, self._max_lon, self._max_lat)}\n</code></pre>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.from_corners","title":"from_corners","text":"<pre><code>from_corners(\n    min_lon: float,\n    min_lat: float,\n    max_lon: float,\n    max_lat: float,\n) -&gt; Self\n</code></pre> <p>Create a BBox from specified longitude &amp; latitude values.</p> <p>Parameters:</p> Name Type Description Default <code>min_lon</code> <code>float</code> <p>Minimum bound of the longitude.</p> required <code>min_lat</code> <code>float</code> <p>Minimum bound of the latitude.</p> required <code>max_lon</code> <code>float</code> <p>Maximum bound of the longitude.</p> required <code>max_lat</code> <code>float</code> <p>Maximum bound of the latitude.</p> required <p>Returns:</p> Type Description <code>BBox</code> <p>Examples:</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.from_corners--bbox-from-corners","title":"BBox From Corners","text":"<p><pre><code>min_lon = 0.0\nmin_lat = 0.0\nmax_lon = 1.0\nmax_lat = 1.0\n\nBBox().from_corners(min_lon, min_lat, max_lon, max_lat)\n</code></pre> <pre><code>BBox([0.0, 0.0, 1.0, 1.0])\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/bbox.py</code> <pre><code>def from_corners(self, min_lon: float, min_lat: float, max_lon: float, max_lat: float) -&gt; Self:\n    \"\"\"Create a BBox from specified longitude &amp; latitude values.\n\n    Parameters\n    ----------\n    min_lon:\n        Minimum bound of the longitude.\n    min_lat:\n        Minimum bound of the latitude.\n    max_lon:\n        Maximum bound of the longitude.\n    max_lat:\n        Maximum bound of the latitude.\n\n    Returns\n    -------\n    BBox\n\n    Examples\n    --------\n    ### BBox From Corners\n    ```python\n    min_lon = 0.0\n    min_lat = 0.0\n    max_lon = 1.0\n    max_lat = 1.0\n\n    BBox().from_corners(min_lon, min_lat, max_lon, max_lat)\n    ```\n    ```python\n    BBox([0.0, 0.0, 1.0, 1.0])\n    ```\n    \"\"\"\n    self._min_lon = min_lon\n    self._min_lat = min_lat\n    self._max_lon = max_lon\n    self._max_lat = max_lat\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.from_list","title":"from_list","text":"<pre><code>from_list(bounds: list[float]) -&gt; Self\n</code></pre> <p>Create a BBox from a GeoJSON BBox.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>list[float]</code> <p>a list of 4 floats representing [min_lon, min_lat, max_lon, max_lat].</p> required <p>Returns:</p> Type Description <code>BBox</code> <p>Raises:</p> Type Description <code>BBoxValueError</code> <code>BBoxLongitudeMismatchError</code> <code>BBoxLatitudeMismatchError</code> <code>TypeError</code> <p>Examples:</p>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.from_list--bbox-from-list","title":"BBox From List","text":"<p><pre><code>BBox().from_list([0.0, 0.0, 1.0, 1.0])\n</code></pre> <pre><code>BBox([0.0, 0.0, 1.0, 1.0])\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/bbox.py</code> <pre><code>def from_list(self, bounds: list[float]) -&gt; Self:\n    \"\"\"Create a BBox from a GeoJSON BBox.\n\n    Parameters\n    ----------\n    bounds:\n        a list of 4 floats representing [min_lon, min_lat, max_lon, max_lat].\n\n    Returns\n    -------\n    BBox\n\n    Raises\n    ------\n    BBoxValueError\n    BBoxLongitudeMismatchError\n    BBoxLatitudeMismatchError\n    TypeError\n\n    Examples\n    --------\n    ### BBox From List\n    ```python\n    BBox().from_list([0.0, 0.0, 1.0, 1.0])\n    ```\n    ```python\n    BBox([0.0, 0.0, 1.0, 1.0])\n    ```\n    \"\"\"\n    match bounds:\n        case list():\n            if len(bounds) != BBOX_LENGTH:\n                raise BBoxValueError(f\"BBox is defined from 4 values, {len(bounds)} given.\")\n            self._min_lon = bounds[0]\n            self._min_lat = bounds[1]\n            self._max_lon = bounds[2]\n            self._max_lat = bounds[3]\n        case _:\n            raise TypeError(\"'bounds' is not of type list[float].\")\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/bbox/#dfi.models.filters.geometry.bbox.BBox.validate","title":"validate","text":"<pre><code>validate() -&gt; Self\n</code></pre> <p>Validate the BBox.</p> <p>Returns:</p> Type Description <code>BBox</code> <p>Raises:</p> Type Description <code>BBoxLongitudeMismatchError</code> <code>BBoxLatitudeMismatchError</code> Source code in <code>dfi/models/filters/geometry/bbox.py</code> <pre><code>def validate(self) -&gt; Self:\n    \"\"\"Validate the BBox.\n\n    Returns\n    -------\n    BBox\n\n    Raises\n    ------\n    BBoxLongitudeMismatchError\n    BBoxLatitudeMismatchError\n    \"\"\"\n    if not (\n        hasattr(self, \"_min_lon\")\n        or hasattr(self, \"_min_lat\")\n        or hasattr(self, \"_max_lon\")\n        or hasattr(self, \"_max_lat\")\n    ):\n        raise BBoxUndefinedError\n\n    Point(self._min_lon, self._min_lat).validate()\n    Point(self._max_lon, self._max_lat).validate()\n\n    if self._min_lon &gt;= self._max_lon:\n        raise BBoxLongitudeMismatchError(f\"min_lon ({self._min_lon}) is &gt;= max_lon ({self._max_lon})\")\n    if self._min_lat &gt;= self._max_lat:\n        raise BBoxLatitudeMismatchError(f\"min_lat ({self._min_lat}) is &gt;= max_lat ({self._max_lat})\")\n\n    return self\n</code></pre>"},{"location":"reference/models/filters/geometry/point/","title":"Point","text":""},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point","title":"point","text":"<p>A Point or vertice of a Polygon.</p>"},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point.Point","title":"Point","text":"<pre><code>Point(lon: float, lat: float)\n</code></pre> <p>A vertice of a Polygon.</p> <p>Parameters:</p> Name Type Description Default <code>lon</code> <code>float</code> <p>longitude</p> required <code>lat</code> <code>float</code> <p>latitude</p> required <p>Raises:</p> Type Description <code>LongitudeOutOfBoundsError</code> <code>LatitudeOutOfBoundsError</code> <p>Examples:</p> <p><pre><code>Point(0.0, 1.0)\n</code></pre> <pre><code>Point(0.0, 1.0)\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/point.py</code> <pre><code>def __init__(self, lon: float, lat: float) -&gt; None:\n    \"\"\"Create a Point from coordinates and checks bounds.\n\n    Parameters\n    ----------\n    lon:\n        longitude\n    lat:\n        latitude\n\n    Raises\n    ------\n    LongitudeOutOfBoundsError\n    LatitudeOutOfBoundsError\n\n    Examples\n    --------\n    ```python\n    Point(0.0, 1.0)\n    ```\n    ```python\n    Point(0.0, 1.0)\n    ```\n    \"\"\"\n    self._lon = lon\n    self._lat = lat\n    self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point.Point.lat","title":"lat  <code>property</code>","text":"<pre><code>lat: float\n</code></pre> <p>The latitude property.</p>"},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point.Point.lon","title":"lon  <code>property</code>","text":"<pre><code>lon: float\n</code></pre> <p>The longitude property.</p>"},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point.Point.build","title":"build","text":"<pre><code>build() -&gt; tuple[float, float]\n</code></pre> <p>Return values formatted for the Query Document.</p> Source code in <code>dfi/models/filters/geometry/point.py</code> <pre><code>def build(self) -&gt; tuple[float, float]:\n    \"\"\"Return values formatted for the Query Document.\"\"\"\n    return (self._lon, self._lat)\n</code></pre>"},{"location":"reference/models/filters/geometry/point/#dfi.models.filters.geometry.point.Point.validate","title":"validate","text":"<pre><code>validate() -&gt; Self\n</code></pre> <p>Validate the Point.</p> <p>Returns:</p> Type Description <code>Point</code> <p>Raises:</p> Type Description <code>LongitudeOutOfBoundsError</code> <code>LatitudeOutOfBoundsError</code> Source code in <code>dfi/models/filters/geometry/point.py</code> <pre><code>def validate(self) -&gt; Self:\n    \"\"\"Validate the Point.\n\n    Returns\n    -------\n    Point\n\n    Raises\n    ------\n    LongitudeOutOfBoundsError\n    LatitudeOutOfBoundsError\n    \"\"\"\n    self._validate_longitude(self._lon)\n    self._validate_latitude(self._lat)\n    return self\n</code></pre>"},{"location":"reference/models/filters/geometry/polygon/","title":"Polygon","text":""},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon","title":"polygon","text":"<p>Polygon model definition.</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.RawCoords","title":"RawCoords  <code>module-attribute</code>","text":"<pre><code>RawCoords: TypeAlias = tuple[float, float]\n</code></pre> <p>Alias for <code>tuple[float, float]</code></p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon","title":"Polygon","text":"<p>A 2D Polygon as defined in GeoJSON https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6.</p> Attention <p>Polygons should be composed of a singular linear ring.  MultiPolygons are not supported.</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.coordinates","title":"coordinates  <code>property</code>","text":"<pre><code>coordinates: tuple[Point, ...]\n</code></pre> <p>The coordinates property.</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.build","title":"build","text":"<pre><code>build() -&gt; dict[str, str | tuple[RawCoords, ...]]\n</code></pre> <p>Validate the polygon is defined and format the polygon for the Query Document.</p> Source code in <code>dfi/models/filters/geometry/polygon.py</code> <pre><code>def build(self) -&gt; dict[str, str | tuple[RawCoords, ...]]:\n    \"\"\"Validate the polygon is defined and format the polygon for the Query Document.\"\"\"\n    self.validate()\n    return {\"type\": \"Polygon\", \"coordinates\": tuple(point.build() for point in self._coordinates)}\n</code></pre>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_geojson","title":"from_geojson","text":"<pre><code>from_geojson(geojson: dict[str, Any]) -&gt; Self\n</code></pre> <p>Create a Polygon from a given GeoJSON Polygon.</p> <p>Parameters:</p> Name Type Description Default <code>geojson</code> <code>dict[str, Any]</code> <p>a geojson dictionary.</p> required <p>Raises:</p> Type Description <code>LinearRingError</code> <code>PolygonNotClosedError</code> <code>PolygonUndefinedError</code> <p>Examples:</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_geojson--polygon-from-points","title":"Polygon from Points","text":"<p><pre><code>geojson = {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n        [\n            [0.0, 0.0],\n            [1.0, 0.0],\n            [1.0, 1.0],\n            [0.0, 1.0],\n            [0.0, 0.0],\n        ]\n    ],\n}\nPolygon().from_geojson(geojson)\n</code></pre> <pre><code>Polygon(\n    (\n        Point(0.0, 0.0),\n        Point(0.0, 1.0),\n        Point(1.0, 1.0),\n        Point(1.0, 0.0),\n        Point(0.0, 0.0),\n    )\n)\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/polygon.py</code> <pre><code>def from_geojson(self, geojson: dict[str, Any]) -&gt; Self:\n    \"\"\"Create a Polygon from a given GeoJSON Polygon.\n\n    Parameters\n    ----------\n    geojson:\n        a geojson dictionary.\n\n    Raises\n    ------\n    LinearRingError\n    PolygonNotClosedError\n    PolygonUndefinedError\n\n    Examples\n    --------\n    ### Polygon from Points\n    ```python\n    geojson = {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n            [\n                [0.0, 0.0],\n                [1.0, 0.0],\n                [1.0, 1.0],\n                [0.0, 1.0],\n                [0.0, 0.0],\n            ]\n        ],\n    }\n    Polygon().from_geojson(geojson)\n    ```\n    ```python\n    Polygon(\n        (\n            Point(0.0, 0.0),\n            Point(0.0, 1.0),\n            Point(1.0, 1.0),\n            Point(1.0, 0.0),\n            Point(0.0, 0.0),\n        )\n    )\n    ```\n    \"\"\"\n    match geometry := geojson.get(\"type\"):\n        case \"Polygon\":\n            coordinates = geojson[\"coordinates\"][0]\n            self._coordinates = tuple(Point(lon, lat) for lon, lat in coordinates)\n        case \"FeatureCollection\" | \"Feature\" | \"MultiPolygon\" | \"LineString\" | \"Point\":\n            raise TypeError(f\"'geojson' is not a Polygon, found {geometry}.\")\n        case _:\n            raise TypeError(\"'geojson' could not be parsed.\")\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_points","title":"from_points","text":"<pre><code>from_points(\n    coordinates: list[Point], geojson: bool = True\n) -&gt; Self\n</code></pre> <p>Create a Polygon from given coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>list[Point]</code> <p>a list of Points.</p> required <code>geojson</code> <code>bool</code> <p>indicates if coordinate order follow GeoJSON specification.</p> <ul> <li>if <code>True</code> expects coordinates with the form (longitude, latitude)</li> <li>if <code>False</code> expects coordinates with the form (latitude, longitude)</li> </ul> <code>True</code> <p>Returns:</p> Type Description <code>Polygon</code> <p>Raises:</p> Type Description <code>LinearRingError</code> <code>PolygonNotClosedError</code> <code>PolygonUndefinedError</code> <p>Examples:</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_points--polygon-from-points","title":"Polygon from Points","text":"<p><pre><code>raw_coords = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [1.0, 1.0],\n    [0.0, 1.0],\n    [0.0, 0.0],\n]\npoints = [Point(p.lon, p.lat) for p in raw_coords]\nPolygon().from_points(points)\n</code></pre> <pre><code>Polygon(\n    (\n        Point(0.0, 0.0),\n        Point(0.0, 1.0),\n        Point(1.0, 1.0),\n        Point(1.0, 0.0),\n        Point(0.0, 0.0),\n    )\n)\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/polygon.py</code> <pre><code>def from_points(self, coordinates: list[Point], geojson: bool = True) -&gt; Self:\n    \"\"\"Create a Polygon from given coordinates.\n\n    Parameters\n    ----------\n    coordinates:\n        a list of Points.\n    geojson:\n        indicates if coordinate order follow GeoJSON specification.\n\n        - if `True` expects coordinates with the form (longitude, latitude)\n        - if `False` expects coordinates with the form (latitude, longitude)\n\n    Returns\n    -------\n    Polygon\n\n    Raises\n    ------\n    LinearRingError\n    PolygonNotClosedError\n    PolygonUndefinedError\n\n    Examples\n    --------\n    ### Polygon from Points\n    ```python\n    raw_coords = [\n        [0.0, 0.0],\n        [1.0, 0.0],\n        [1.0, 1.0],\n        [0.0, 1.0],\n        [0.0, 0.0],\n    ]\n    points = [Point(p.lon, p.lat) for p in raw_coords]\n    Polygon().from_points(points)\n    ```\n    ```python\n    Polygon(\n        (\n            Point(0.0, 0.0),\n            Point(0.0, 1.0),\n            Point(1.0, 1.0),\n            Point(1.0, 0.0),\n            Point(0.0, 0.0),\n        )\n    )\n    ```\n    \"\"\"\n    match coordinates:\n        case list() | tuple():\n            pass\n        case _:\n            raise TypeError(\"'coordinates' is not of type list[float].\")\n    if geojson:\n        self._coordinates = tuple(coordinates)\n    else:\n        self._coordinates = tuple(Point(point.lat, point.lon) for point in coordinates)\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_raw_coords","title":"from_raw_coords","text":"<pre><code>from_raw_coords(\n    coordinates: list[RawCoords], geojson: bool = True\n) -&gt; Self\n</code></pre> <p>Create a Polygon from given coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>list[RawCoords]</code> <p>a list of RawCoords (i.e. list[float, float]).</p> required <code>geojson</code> <code>bool</code> <p>indicates if coordinate order follow GeoJSON specification.</p> <ul> <li>if <code>True</code> expects coordinates with the form (longitude, latitude)</li> <li>if <code>False</code> expects coordinates with the form (latitude, longitude)</li> </ul> <code>True</code> <p>Returns:</p> Type Description <code>Polygon</code> <p>Raises:</p> Type Description <code>LinearRingError</code> <code>PolygonNotClosedError</code> <code>PolygonUndefinedError</code> <p>Examples:</p>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.from_raw_coords--polygon-from-rawcoords","title":"Polygon from RawCoords","text":"<p>From RawCoords is useful when the coordinates of the Polygon are in a list. <pre><code>raw_coords = [[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0], [0.0, 0.0]]\npoints =\nPolygon().from_raw_coords(raw_coords)\n</code></pre> <pre><code>Polygon(\n    (\n        Point(0.0, 0.0),\n        Point(0.0, 1.0),\n        Point(1.0, 1.0),\n        Point(1.0, 0.0),\n        Point(0.0, 0.0),\n    )\n)\n</code></pre></p> Source code in <code>dfi/models/filters/geometry/polygon.py</code> <pre><code>def from_raw_coords(self, coordinates: list[RawCoords], geojson: bool = True) -&gt; Self:\n    \"\"\"Create a Polygon from given coordinates.\n\n    Parameters\n    ----------\n    coordinates:\n        a list of RawCoords (i.e. list[float, float]).\n    geojson:\n        indicates if coordinate order follow GeoJSON specification.\n\n        - if `True` expects coordinates with the form (longitude, latitude)\n        - if `False` expects coordinates with the form (latitude, longitude)\n\n    Returns\n    -------\n    Polygon\n\n    Raises\n    ------\n    LinearRingError\n    PolygonNotClosedError\n    PolygonUndefinedError\n\n    Examples\n    --------\n    ### Polygon from RawCoords\n    From RawCoords is useful when the coordinates of the Polygon are in a list.\n    ```python\n    raw_coords = [[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0], [0.0, 0.0]]\n    points =\n    Polygon().from_raw_coords(raw_coords)\n    ```\n    ```python\n    Polygon(\n        (\n            Point(0.0, 0.0),\n            Point(0.0, 1.0),\n            Point(1.0, 1.0),\n            Point(1.0, 0.0),\n            Point(0.0, 0.0),\n        )\n    )\n    ```\n    \"\"\"\n    if geojson:\n        self._coordinates = tuple(Point(lon, lat) for lon, lat in coordinates)\n    else:\n        self._coordinates = tuple(Point(lon, lat) for lat, lon in coordinates)\n\n    return self.validate()\n</code></pre>"},{"location":"reference/models/filters/geometry/polygon/#dfi.models.filters.geometry.polygon.Polygon.validate","title":"validate","text":"<pre><code>validate() -&gt; Self\n</code></pre> <p>Validate the Polygon.</p> <p>Returns:</p> Type Description <code>Polygon</code> <p>Raises:</p> Type Description <code>LinearRingError</code> <code>PolygonNotClosedError</code> <code>PolygonUndefinedError</code> Source code in <code>dfi/models/filters/geometry/polygon.py</code> <pre><code>def validate(self) -&gt; Self:\n    \"\"\"Validate the Polygon.\n\n    Returns\n    -------\n    Polygon\n\n    Raises\n    ------\n    LinearRingError\n    PolygonNotClosedError\n    PolygonUndefinedError\n    \"\"\"\n    if not hasattr(self, \"_coordinates\"):\n        raise PolygonUndefinedError\n\n    if len(self._coordinates) &lt; MIN_VERTICES:\n        raise LinearRingError(\n            f\"Polygons should be a linear rings with four or more points - only {len(self._coordinates)} found.\"\n        )\n    if self._coordinates[0] != self._coordinates[-1]:\n        raise PolygonNotClosedError(\"Polygons should be a linear ring - first and last points are not identical.\")\n\n    return self\n</code></pre>"},{"location":"reference/models/returns/count/","title":"Count","text":"<p>Model definition for Count return type.</p>"},{"location":"reference/models/returns/count/#dfi.models.returns.count.Count","title":"Count","text":"<pre><code>Count(groupby: GroupBy | str | None = None)\n</code></pre> <p>Count return model.</p>"},{"location":"reference/models/returns/count/#dfi.models.returns.count.Count.groupby","title":"groupby  <code>property</code>","text":"<pre><code>groupby: GroupBy | None\n</code></pre> <p>The groupby property.</p>"},{"location":"reference/models/returns/count/#dfi.models.returns.count.Count.build","title":"build","text":"<pre><code>build() -&gt; dict\n</code></pre> <p>Return a count return model definition for QueryDocument.</p>"},{"location":"reference/models/returns/count/#dfi.models.returns.count.GroupBy","title":"GroupBy","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the valid groupby fields.</p>"},{"location":"reference/models/returns/count/#dfi.models.returns.count.GroupBy.build","title":"build","text":"<pre><code>build() -&gt; dict[str, dict[str, str]]\n</code></pre> <p>Return a GroupBy return model definition for QueryDocument.</p>"},{"location":"reference/models/returns/records/","title":"Records","text":""},{"location":"reference/models/returns/records/#dfi.models.returns.records","title":"records","text":"<p>Model definition for Records return type.</p>"},{"location":"reference/models/returns/records/#dfi.models.returns.records.IncludeField","title":"IncludeField","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Enumerates the valid types for a extra fields that can be returned with records.</p>"},{"location":"reference/models/returns/records/#dfi.models.returns.records.IncludeField.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre> <p>Return an IncludeField return model definition for QueryDocument.</p> Source code in <code>dfi/models/returns/records.py</code> <pre><code>def build(self) -&gt; str:\n    \"\"\"Return an IncludeField return model definition for QueryDocument.\"\"\"\n    return str(self)\n</code></pre>"},{"location":"reference/models/returns/records/#dfi.models.returns.records.Records","title":"Records","text":"<pre><code>Records(include: list[IncludeField | str] | None = None)\n</code></pre> <p>Records return model.</p> Source code in <code>dfi/models/returns/records.py</code> <pre><code>def __init__(self, include: list[IncludeField | str] | None = None):\n    \"\"\"Initialize to base records.  Filter Fields and Metadata are optionally returned.\"\"\"\n    self._include = self._validate_include_fields(include)\n</code></pre>"},{"location":"reference/models/returns/records/#dfi.models.returns.records.Records.include","title":"include  <code>property</code>","text":"<pre><code>include: list[IncludeField] | None\n</code></pre> <p>The include property.</p>"},{"location":"reference/models/returns/records/#dfi.models.returns.records.Records.build","title":"build","text":"<pre><code>build() -&gt; dict[str, str | list[str]]\n</code></pre> <p>Return a records return model definition for QueryDocument.</p> Source code in <code>dfi/models/returns/records.py</code> <pre><code>def build(self) -&gt; dict[str, str | list[str]]:\n    \"\"\"Return a records return model definition for QueryDocument.\"\"\"\n    result: dict[str, str | list[str]] = {\"type\": \"records\"}\n    if self.include:\n        result.update({\"include\": [field.build() for field in self.include]})\n    return result\n</code></pre>"},{"location":"reference/services/datasets/","title":"Datasets","text":""},{"location":"reference/services/datasets/#dfi.services.datasets","title":"datasets","text":"<p>Manages queries to the Datasets API.  Allows users to find, create, update, and delete datasets, dataset schemas, and dataset permissions.</p> <p>Tests are dependent on other test.  The order in which tests are run matters.</p>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets","title":"Datasets","text":"<pre><code>Datasets(conn: Connect)\n</code></pre> <p>Class responsible for handling datasets and dataset schemas.</p> Source code in <code>dfi/services/datasets.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    self.conn = conn\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.add_enums","title":"add_enums","text":"<pre><code>add_enums(\n    dataset_id: str, metadata_enums: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Add new values to an enum field. Any new values added to fields here are merged into the existing values.</p> Endpoint <p>POST /v1/datasets/{id}/schema/values</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to add enum values to.</p> required <code>metadata_enums</code> <code>dict[str, Any]</code> <p>a dictionary of metadata fields with enums values to be added to the dataset schema.</p> required <p>Returns:</p> Name Type Description <code>schema</code> <code>dict[str, Any]</code> <p>the newly updated metadata schema</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nmetadata_enums = {\n    \"plantCultivar\": {\n        \"type\": \"enum\",\n        \"values\": [\"kale\", \"kohlrabi\", \"mustard\"],\n        \"nullable\": True,\n    },\n}\ndfi.datasets.add_enums(\n    dataset_id=\"1234\", metadata_enums=metadata_enums\n)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def add_enums(\n    self, dataset_id: str, metadata_enums: dict[str, Any]\n) -&gt; dict[str, Any]:\n    \"\"\"Add new values to an enum field. Any new values added to fields here are merged into the existing values.\n\n    ??? info \"Endpoint\"\n        [POST /v1/datasets/{id}/schema/values](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/post_v1_datasets__id__schema_values)\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to add enum values to.\n    metadata_enums:\n        a dictionary of metadata fields with enums values to be added to the dataset schema.\n\n    Returns\n    -------\n    schema:\n        the newly updated metadata schema\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    metadata_enums = {\n        \"plantCultivar\": {\n            \"type\": \"enum\",\n            \"values\": [\"kale\", \"kohlrabi\", \"mustard\"],\n            \"nullable\": True,\n        },\n    }\n    dfi.datasets.add_enums(\n        dataset_id=\"1234\", metadata_enums=metadata_enums\n    )\n    ```\n    \"\"\"\n    with self.conn.api_post(\n        f\"v1/datasets/{dataset_id}/schema/values\",\n        stream=False,\n        json=metadata_enums,\n    ) as response:\n        response.raise_for_status()\n        schema: dict[str, Any] = response.json()\n        return schema\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.add_permissions","title":"add_permissions","text":"<pre><code>add_permissions(\n    dataset_id: str, permissions: list[dict[str, Any]]\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Add new permissions to a dataset.</p> Endpoint <p>POST /v1/datasets/{id}/permissions</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to add permissions to.</p> required <code>permissions</code> <code>list[dict[str, Any]]</code> <p>list of permissions to be added.</p> required <p>Returns:</p> Name Type Description <code>permissions</code> <code>list[dict[str, Any]]</code> <p>list of added permissions for the dataset.</p> <p>Examples:</p>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.add_permissions--i-update-permissions-so-anyone-can-read-the-dataset","title":"I. Update permissions so anyone can read the dataset","text":"<pre><code>from dfi import Client\n\ndataset_id = \"1234\"\npermissions = [{\"type\": \"reader\", \"scope\": \"all\"}]\ndfi = Client(token, url)\nupdated_permissions = dfi.datasets.add_permissions(\n    dataset_id=dataset_id, permissions=permissions\n)\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.add_permissions--ii-update-permissions-specific-user-has-write-permissions","title":"II. Update permissions specific user has write permissions","text":"<pre><code>from dfi import Client\n\ndataset_id = \"1234\"\npermissions = [\n    {\n        \"type\": \"writer\",\n        \"scope\": \"identity\",\n        \"identityId\": \"user-123\",\n    }\n]\ndfi = Client(token, url)\nupdated_permissions = dfi.datasets.add_permissions(\n    dataset_id=dataset_id, permissions=permissions\n)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def add_permissions(\n    self, dataset_id: str, permissions: list[dict[str, Any]]\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Add new permissions to a dataset.\n\n    ??? info \"Endpoint\"\n        [POST /v1/datasets/{id}/permissions](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/post_v1_datasets__id__permissions)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to add permissions to.\n    permissions:\n        list of permissions to be added.\n\n    Returns\n    -------\n    permissions:\n        list of added permissions for the dataset.\n\n    Examples\n    --------\n    ### I. Update permissions so anyone can read the dataset\n    ```python\n    from dfi import Client\n\n    dataset_id = \"1234\"\n    permissions = [{\"type\": \"reader\", \"scope\": \"all\"}]\n    dfi = Client(token, url)\n    updated_permissions = dfi.datasets.add_permissions(\n        dataset_id=dataset_id, permissions=permissions\n    )\n    ```\n\n    ### II. Update permissions specific user has write permissions\n    ```python\n    from dfi import Client\n\n    dataset_id = \"1234\"\n    permissions = [\n        {\n            \"type\": \"writer\",\n            \"scope\": \"identity\",\n            \"identityId\": \"user-123\",\n        }\n    ]\n    dfi = Client(token, url)\n    updated_permissions = dfi.datasets.add_permissions(\n        dataset_id=dataset_id, permissions=permissions\n    )\n    ```\n\n    \"\"\"\n    with self.conn.api_post(\n        f\"v1/datasets/{dataset_id}/permissions\", stream=False, json=permissions\n    ) as response:\n        response.raise_for_status()\n        updated_permissions: list[dict[str, Any]] = response.json()\n        return updated_permissions\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.create","title":"create","text":"<pre><code>create(dataset: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Create an empty dataset.</p> Endpoint <p>POST /v1/datasets</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>dict[str, Any]</code> <p>the dataset definition to be created.</p> required <p>Returns:</p> Name Type Description <code>dataset</code> <code>dict[str, Any]</code> <p>The <code>dataset_id</code> is returned under the <code>id</code> key.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndataset = {\n    \"name\": \"test-0\",\n    \"description\": None,\n    \"active\": True,\n    \"tags\": {},\n    \"type\": \"managed\",\n    \"model\": \"point\",\n    \"dataDescription\": {\n        \"metadataSchema\": {\n            \"plantHeight\": {\n                \"type\": \"number\",\n                \"nullable\": False,\n                \"signed\": False,\n            },\n            \"plantIPv4\": {\"type\": \"ip\", \"nullable\": True},\n            \"plantCultivar\": {\n                \"type\": \"enum\",\n                \"nullable\": True,\n                \"values\": [\n                    \"broccoli\",\n                    \"brocollini\",\n                    \"brussel sprouts\",\n                    \"cabbage\",\n                    \"cauliflower\",\n                    \"collards\",\n                ],\n            },\n        },\n        \"boundingBox\": [-180.0, -90.0, 180.0, 90.0],\n        \"minDatetime\": \"2021-01-01T00:00:00.000Z\",\n        \"maxDatetime\": \"2022-01-01T00:00:00.000Z\",\n    },\n    \"source\": {\"s3SourceUrl\": \"s3://test-bucket/dataset-0\"},\n    \"pipeline\": {\"curationConfiguration\": {}},\n    \"pii\": {\"keepPii\": False, \"piiFields\": []},\n    \"storage\": {\n        \"dataStoreType\": \"dfi\",\n        \"dataStoreConnectionDetails\": {\n            \"host\": \"0.0.0.0\",\n            \"port\": \"1234\",\n            \"queryTimeout\": \"3600000\",\n        },\n    },\n    \"destination\": {\"dataStoreRetentionLength\": 0},\n    \"permissions\": [{\"type\": \"reader\", \"scope\": \"all\"}],\n}\n\ndfi = Client(token, url)\ndfi.datasets.create(dataset)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def create(self, dataset: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"Create an empty dataset.\n\n    ??? info \"Endpoint\"\n        [POST /v1/datasets](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/post_v1_datasets)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset:\n        the dataset definition to be created.\n\n    Returns\n    -------\n    dataset:\n        The `dataset_id` is returned under the `id` key.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dataset = {\n        \"name\": \"test-0\",\n        \"description\": None,\n        \"active\": True,\n        \"tags\": {},\n        \"type\": \"managed\",\n        \"model\": \"point\",\n        \"dataDescription\": {\n            \"metadataSchema\": {\n                \"plantHeight\": {\n                    \"type\": \"number\",\n                    \"nullable\": False,\n                    \"signed\": False,\n                },\n                \"plantIPv4\": {\"type\": \"ip\", \"nullable\": True},\n                \"plantCultivar\": {\n                    \"type\": \"enum\",\n                    \"nullable\": True,\n                    \"values\": [\n                        \"broccoli\",\n                        \"brocollini\",\n                        \"brussel sprouts\",\n                        \"cabbage\",\n                        \"cauliflower\",\n                        \"collards\",\n                    ],\n                },\n            },\n            \"boundingBox\": [-180.0, -90.0, 180.0, 90.0],\n            \"minDatetime\": \"2021-01-01T00:00:00.000Z\",\n            \"maxDatetime\": \"2022-01-01T00:00:00.000Z\",\n        },\n        \"source\": {\"s3SourceUrl\": \"s3://test-bucket/dataset-0\"},\n        \"pipeline\": {\"curationConfiguration\": {}},\n        \"pii\": {\"keepPii\": False, \"piiFields\": []},\n        \"storage\": {\n            \"dataStoreType\": \"dfi\",\n            \"dataStoreConnectionDetails\": {\n                \"host\": \"0.0.0.0\",\n                \"port\": \"1234\",\n                \"queryTimeout\": \"3600000\",\n            },\n        },\n        \"destination\": {\"dataStoreRetentionLength\": 0},\n        \"permissions\": [{\"type\": \"reader\", \"scope\": \"all\"}],\n    }\n\n    dfi = Client(token, url)\n    dfi.datasets.create(dataset)\n    ```\n\n    \"\"\"\n    with self.conn.api_post(\"v1/datasets\", stream=False, json=dataset) as response:\n        response.raise_for_status()\n        dataset_info: dict[str, Any] = response.json()\n        return dataset_info\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.delete","title":"delete","text":"<pre><code>delete(dataset_id: str) -&gt; None\n</code></pre> <p>Delete a dataset by id.</p> Endpoint <p>DELETE /v1/datasets/{id}</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to delete.</p> required <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\ndataset_id = \"1234\"\ndfi.datasets.delete(dataset_id)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def delete(self, dataset_id: str) -&gt; None:\n    \"\"\"Delete a dataset by id.\n\n    ??? info \"Endpoint\"\n        [DELETE /v1/datasets/{id}](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/delete_v1_datasets__id_)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to delete.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    dataset_id = \"1234\"\n    dfi.datasets.delete(dataset_id)\n    ```\n\n    \"\"\"\n    with self.conn.api_delete(\n        f\"v1/datasets/{dataset_id}\", stream=False\n    ) as response:\n        response.raise_for_status()\n        return None\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.delete_permissions","title":"delete_permissions","text":"<pre><code>delete_permissions(\n    dataset_id: str, permissions: list[dict[str, Any]]\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Remove permissions from a dataset.  Given permission must match exactly to be removed.</p> Endpoint <p>DELETE /v1/datasets/{id}/permissions</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to remove permissions from.</p> required <code>permissions</code> <code>list[dict[str, Any]]</code> <p>permissions to be deleted from the dataset.</p> required <p>Returns:</p> Name Type Description <code>permissions</code> <code>list[dict[str, Any]]</code> <p>list of deleted permissions from the dataset.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndataset_id = \"1234\"\npermissions = [\n    {\n        \"type\": \"reader\",\n        \"scope\": \"identity\",\n        \"identityId\": \"123\",\n    },\n    {\"type\": \"reader\", \"scope\": \"all\"},\n]\ndfi = Client(token, url)\ndfi.datasets.delete_permissions(\n    dataset_id=dataset_id, permissions=permissions\n)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def delete_permissions(\n    self, dataset_id: str, permissions: list[dict[str, Any]]\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Remove permissions from a dataset.  Given permission must match exactly to be removed.\n\n    ??? info \"Endpoint\"\n        [DELETE /v1/datasets/{id}/permissions](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/delete_v1_datasets__id__permissions)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to remove permissions from.\n    permissions:\n        permissions to be deleted from the dataset.\n\n    Returns\n    -------\n    permissions:\n        list of deleted permissions from the dataset.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dataset_id = \"1234\"\n    permissions = [\n        {\n            \"type\": \"reader\",\n            \"scope\": \"identity\",\n            \"identityId\": \"123\",\n        },\n        {\"type\": \"reader\", \"scope\": \"all\"},\n    ]\n    dfi = Client(token, url)\n    dfi.datasets.delete_permissions(\n        dataset_id=dataset_id, permissions=permissions\n    )\n    ```\n\n    \"\"\"\n    with self.conn.api_delete(\n        f\"v1/datasets/{dataset_id}/permissions\", stream=False, json=permissions\n    ) as response:\n        response.raise_for_status()\n        removed_permissions: list[dict[str, Any]] = response.json()\n        return removed_permissions\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.find","title":"find","text":"<pre><code>find(\n    name: str | None = None,\n    before: datetime | None = None,\n    limit: int | None = None,\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Find datasets.</p> Endpoint <p>GET /v1/datasets</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>retrieves all datasets with <code>name</code>.</p> <code>None</code> <code>before</code> <code>datetime | None</code> <p>retrieves all datasets created before <code>before</code>.</p> <code>None</code> <code>limit</code> <code>int | None</code> <p>only return <code>limit</code> number of datasets.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dataset</code> <code>list[dict[str, Any]]</code> <p>a list of dataset definitions.</p> <p>Examples:</p> <pre><code>from datetime import datetime\nfrom dfi import Client\n\ndfi = Client(token, url)\n\ntime = datetime.fromisoformat(\"2023-03-31T12:50:00Z\")\ndfi.datasets.find(name=\"London\", before=time, limit=10)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def find(\n    self,\n    name: str | None = None,\n    before: datetime | None = None,\n    limit: int | None = None,\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Find datasets.\n\n    ??? info \"Endpoint\"\n        [GET /v1/datasets](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/get_v1_datasets)\n\n    Parameters\n    ----------\n    name:\n        retrieves all datasets with `name`.\n    before:\n        retrieves all datasets created before `before`.\n    limit:\n        only return `limit` number of datasets.\n\n    Returns\n    -------\n    dataset:\n        a list of dataset definitions.\n\n    Examples\n    --------\n    ```python\n    from datetime import datetime\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    time = datetime.fromisoformat(\"2023-03-31T12:50:00Z\")\n    dfi.datasets.find(name=\"London\", before=time, limit=10)\n    ```\n\n    \"\"\"\n    params = {\n        \"name\": name,\n        \"before\": before.isoformat() if before else None,\n        \"limit\": limit,\n    }\n\n    with self.conn.api_get(\"v1/datasets\", stream=False, params=params) as response:\n        response.raise_for_status()\n        datasets: list[dict[str, Any]] = response.json()\n        return datasets\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.find_by_id","title":"find_by_id","text":"<pre><code>find_by_id(dataset_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Find a dataset by id.</p> Endpoint <p>GET /v1/datasets/{id}</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to retrieve.</p> required <p>Returns:</p> Name Type Description <code>dataset</code> <code>dict[str, Any]</code> <p>if the Dataset ID exists returns information about the dataset.</p> <p>Raises:</p> Type Description <code>DFIResponseError</code> <p>if the Dataset ID cannot be found.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.datasets.find_by_id(dataset_id=\"1234\")\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def find_by_id(self, dataset_id: str) -&gt; dict[str, Any]:\n    \"\"\"Find a dataset by id.\n\n    ??? info \"Endpoint\"\n        [GET /v1/datasets/{id}](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/get_v1_datasets__id_)\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to retrieve.\n\n    Returns\n    -------\n    dataset:\n        if the Dataset ID exists returns information about the dataset.\n\n    Raises\n    ------\n    DFIResponseError\n        if the Dataset ID cannot be found.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.datasets.find_by_id(dataset_id=\"1234\")\n    ```\n    \"\"\"\n    with self.conn.api_get(f\"v1/datasets/{dataset_id}\", stream=False) as response:\n        response.raise_for_status()\n        dataset: dict[str, Any] = response.json()\n        return dataset\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.get_my_permissions","title":"get_my_permissions","text":"<pre><code>get_my_permissions(dataset_id: str) -&gt; dict\n</code></pre> <p>Get list of the current identity's permissions on a dataset.</p> Endpoint <p>GET /v1/datasets/{id}/permissions/me</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to retrieve user permissions from.</p> required <p>Returns:</p> Type Description <code>dataset permissions:</code> <p>the user's permissions for the dataset.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.datasets.get_my_permissions(dataset_id=\"1234\")\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def get_my_permissions(self, dataset_id: str) -&gt; dict:\n    \"\"\"Get list of the current identity's permissions on a dataset.\n\n    ??? info \"Endpoint\"\n        [GET /v1/datasets/{id}/permissions/me](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/get_v1_datasets__id__permissions_me)\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to retrieve user permissions from.\n\n    Returns\n    -------\n    dataset permissions:\n        the user's permissions for the dataset.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.datasets.get_my_permissions(dataset_id=\"1234\")\n    ```\n\n    \"\"\"\n    with self.conn.api_get(\n        f\"v1/datasets/{dataset_id}/permissions/me\", stream=False\n    ) as response:\n        response.raise_for_status()\n        permissions: dict[str, Any] = response.json()\n        return permissions\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.get_permissions","title":"get_permissions","text":"<pre><code>get_permissions(dataset_id: str) -&gt; list[dict[str, Any]]\n</code></pre> <p>Get list of permissions for this dataset.</p> Endpoint <p>GET /v1/datasets/{id}/permissions</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to retrieve permissions from.</p> required <p>Returns:</p> Name Type Description <code>permissions</code> <code>list[dict[str, Any]]</code> <p>list of permissions for dataset.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.datasets.get_permissions(dataset_id=\"1234\")\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def get_permissions(self, dataset_id: str) -&gt; list[dict[str, Any]]:\n    \"\"\"Get list of permissions for this dataset.\n\n    ??? info \"Endpoint\"\n        [GET /v1/datasets/{id}/permissions](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/get_v1_datasets__id__permissions)\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to retrieve permissions from.\n\n    Returns\n    -------\n    permissions:\n        list of permissions for dataset.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.datasets.get_permissions(dataset_id=\"1234\")\n    ```\n\n    \"\"\"\n    with self.conn.api_get(\n        f\"v1/datasets/{dataset_id}/permissions\", stream=False\n    ) as response:\n        response.raise_for_status()\n        permissions: list[dict[str, Any]] = response.json()\n        return permissions\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.get_schema","title":"get_schema","text":"<pre><code>get_schema(\n    dataset_id: str,\n    schema_type: str = \"full\",\n    media_type: str = \"json\",\n) -&gt; dict[str, Any] | Schema\n</code></pre> <p>Retrieve a copy of the schema for this dataset.</p> Endpoint <p>GET /v1/datasets/{id}/schema</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to retrieve schema from.</p> required <code>schema_type</code> <code>str</code> <p>set which type of Feather schema to return.  Defaults to \"full\".</p> <ul> <li><code>full</code> - Return a full Feather schema with all fields</li> <li><code>core</code> - Return a Feather schema with only the core fields</li> <li><code>withMetadataId</code> - return a Feather schema with the core fields + metadataId field.</li> <li><code>withFilterFields</code> - return a Feather schema with the core fields + filter fields.</li> </ul> <code>'full'</code> <code>media_type</code> <code>str</code> <p>or <code>\"feather\"</code>.  Defaults to <code>\"json\"</code>.</p> <code>'json'</code> <p>Returns:</p> Name Type Description <code>schema</code> <code>dict[str, Any] | Schema</code> <p>the dataset's schema.</p> <p>Examples:</p>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.get_schema--retrieve-dataset-schema-as-json","title":"Retrieve dataset schema as JSON","text":"<pre><code>from dfi import Client\n\ndfi = Client(token, url)\nschema = dfi.datasets.get_schema(\n    dataset_id=\"&lt;dataset id&gt;\",\n    schema_type=\"full\",\n    media_type=\"json\",\n)\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.get_schema--retrieve-dataset-schema-as-feather-bytes","title":"Retrieve dataset schema as Feather bytes","text":"<pre><code>from dfi import Client\n\ndfi = Client(token, url)\nschema = dfi.datasets.get_schema(\n    dataset_id=\"&lt;dataset id&gt;\",\n    schema_type=\"full\",\n    media_type=\"feather\",\n)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def get_schema(\n    self, dataset_id: str, schema_type: str = \"full\", media_type: str = \"json\"\n) -&gt; dict[str, Any] | pa.Schema:\n    \"\"\"Retrieve a copy of the schema for this dataset.\n\n    ??? info \"Endpoint\"\n        [GET /v1/datasets/{id}/schema](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/get_v1_datasets__id__schema)\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to retrieve schema from.\n    schema_type:\n        set which type of Feather schema to return.  Defaults to \"full\".\n\n        - `full` - Return a full Feather schema with all fields\n        - `core` - Return a Feather schema with only the core fields\n        - `withMetadataId` - return a Feather schema with the core fields + metadataId field.\n        - `withFilterFields` - return a Feather schema with the core fields + filter fields.\n    media_type: (`json` or `feather`) defines the file format for the returned schema, either `\"json\"`\n        or `\"feather\"`.  Defaults to `\"json\"`.\n\n    Returns\n    -------\n    schema:\n        the dataset's schema.\n\n    Examples\n    --------\n    ### Retrieve dataset schema as JSON\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    schema = dfi.datasets.get_schema(\n        dataset_id=\"&lt;dataset id&gt;\",\n        schema_type=\"full\",\n        media_type=\"json\",\n    )\n    ```\n\n    ### Retrieve dataset schema as Feather bytes\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    schema = dfi.datasets.get_schema(\n        dataset_id=\"&lt;dataset id&gt;\",\n        schema_type=\"full\",\n        media_type=\"feather\",\n    )\n    ```\n\n    \"\"\"\n    schema_types = {\n        \"full\": \"full\",\n        \"core\": \"core\",\n        \"with_metadata_id\": \"withMetadataId\",\n        \"with_filter_fields\": \"withFilterFields\",\n    }\n    params = {\"type\": schema_types[schema_type]}\n\n    headers = {\n        \"Authorization\": f\"Bearer {self.conn.api_token}\",\n        \"Accept\": (\n            \"application/feather\" if media_type == \"feather\" else \"application/json\"\n        ),\n    }\n    url = f\"{self.conn.base_url}/v1/datasets/{dataset_id}/schema\"\n\n    with requests.get(\n        url,\n        headers=headers,\n        stream=False,\n        params=params,\n        timeout=self.conn.query_timeout,\n    ) as response:\n        response.raise_for_status()\n\n        if media_type == \"feather\":\n            buffer = memoryview(response.content)\n            with pa.input_stream(buffer) as stream:\n                schema = stream.read_buffer()\n                return feather.read_table(schema).schema\n        return response.json()\n</code></pre>"},{"location":"reference/services/datasets/#dfi.services.datasets.Datasets.update","title":"update","text":"<pre><code>update(\n    dataset_id: str, dataset: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Update a dataset by id.</p> Endpoint <p>PATCH /v1/datasets/{id}</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>id of the dataset to update.</p> required <code>dataset</code> <code>dict[str, Any]</code> <p>new dataset definition.</p> required <p>Returns:</p> Name Type Description <code>dataset</code> <code>dict[str, Any]</code> <p>the updated dataset info.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\ndataset_id = \"1234\"\n\ndataset_update = {\n    \"description\": \"a test dataset\",\n    \"dataDescription\": {\n        \"minDatetime\": \"2020-01-01T00:00:00.000Z\",\n        \"maxDatetime\": \"2021-01-01T00:00:00.000Z\",\n    },\n}\n\ndfi.datasets.update(dataset_id, dataset_update)\n</code></pre> Source code in <code>dfi/services/datasets.py</code> <pre><code>def update(self, dataset_id: str, dataset: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"Update a dataset by id.\n\n    ??? info \"Endpoint\"\n        [PATCH /v1/datasets/{id}](https://api.prod.generalsystem.com/docs/api#/Dataset%20Management%20(v1)/patch_v1_datasets__id_)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset_id:\n        id of the dataset to update.\n    dataset:\n        new dataset definition.\n\n    Returns\n    -------\n    dataset:\n        the updated dataset info.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    dataset_id = \"1234\"\n\n    dataset_update = {\n        \"description\": \"a test dataset\",\n        \"dataDescription\": {\n            \"minDatetime\": \"2020-01-01T00:00:00.000Z\",\n            \"maxDatetime\": \"2021-01-01T00:00:00.000Z\",\n        },\n    }\n\n    dfi.datasets.update(dataset_id, dataset_update)\n    ```\n\n    \"\"\"\n    with self.conn.api_patch(\n        f\"v1/datasets/{dataset_id}\", stream=False, json=dataset\n    ) as response:\n        response.raise_for_status()\n        dataset_info: dict[str, Any] = response.json()\n        return dataset_info\n</code></pre>"},{"location":"reference/services/identities/","title":"Identities","text":""},{"location":"reference/services/identities/#dfi.services.identities","title":"identities","text":"<p>Manages identity authentication via the Identity Management API service.</p>"},{"location":"reference/services/identities/#dfi.services.identities.Identities","title":"Identities","text":"<pre><code>Identities(conn: Connect)\n</code></pre> <p>Class responsible handling identities and tokens.</p> Source code in <code>dfi/services/identities.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    self.conn = conn\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.create_token","title":"create_token","text":"<pre><code>create_token(name: str, validity: str) -&gt; dict\n</code></pre> <p>Generate a new API token for the current user.</p> Endpoint <p>POST /v1/tokens</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name for token.</p> required <code>validity</code> <code>str</code> <p>how long the token is valid for.  Period of token validity in ISO8601 format. Default is 1 year.</p> <ul> <li>pattern: <code>^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d{1,3})?)S)?)?$</code></li> <li>example: <code>\"P1Y\"</code></li> </ul> required <p>Returns:</p> Type Description <code>token info:</code> <p>information about the new token.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nname = \"token_1\"\nvalidity = \"P1Y\"\ntoken_info = dfi.identities.create_token(name, validity)\ntoken = token_info[\"token]\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def create_token(self, name: str, validity: str) -&gt; dict:\n    r\"\"\"Generate a new API token for the current user.\n\n    ??? info \"Endpoint\"\n        [POST /v1/tokens](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/post_v1_tokens)\n\n    Parameters\n    ----------\n    name:\n        name for token.\n    validity:\n        how long the token is valid for.  Period of token validity in ISO8601 format. Default is 1 year.\n\n        - pattern: `^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d{1,3})?)S)?)?$`\n        - example: `\"P1Y\"`\n\n    Returns\n    -------\n    token info:\n        information about the new token.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    name = \"token_1\"\n    validity = \"P1Y\"\n    token_info = dfi.identities.create_token(name, validity)\n    token = token_info[\"token]\n    ```\n    \"\"\"\n    payload = {\"name\": name, \"validity\": validity}\n    with self.conn.api_post(\"v1/tokens\", json=payload, stream=False) as response:\n        response.raise_for_status()\n        token_info: dict = response.json()\n        return token_info\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.expire_token","title":"expire_token","text":"<pre><code>expire_token(token_id: str) -&gt; None\n</code></pre> <p>Expires the given api token.</p> Endpoint <p>DELETE /v1/tokens/{id}</p> Finding an expired token <p>It's previous existence can still be found with <code>dfi.get_tokens(include_expired=True)</code></p> <p>Parameters:</p> Name Type Description Default <code>token_id</code> <code>str</code> <p>the Token ID to expire.</p> required <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\ndfi.identities.expire_token(\"&lt;token id&gt;\")\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def expire_token(self, token_id: str) -&gt; None:\n    \"\"\"Expires the given api token.\n\n    ??? info \"Endpoint\"\n        [DELETE /v1/tokens/{id}](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/delete_v1_identities__id_)\n\n    ??? question \"Finding an expired token\"\n        It's previous existence can still be found with `dfi.get_tokens(include_expired=True)`\n\n    Parameters\n    ----------\n    token_id:\n        the Token ID to expire.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    dfi.identities.expire_token(\"&lt;token id&gt;\")\n    ```\n    \"\"\"\n    with self.conn.api_delete(f\"v1/tokens/{token_id}\", stream=False) as response:\n        response.raise_for_status()\n        return None\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.get_identities","title":"get_identities","text":"<pre><code>get_identities() -&gt; list[dict[str, Any]]\n</code></pre> <p>Retrieve a list of identities.</p> Endpoint <p>GET /v1/identities</p> Admin Request <p>You need to be an admin for this request.</p> <p>Returns:</p> Name Type Description <code>identities</code> <code>list[dict[str, Any]]</code> <p>a list of identities</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nidentities = dfi.identities.get_identities()\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def get_identities(self) -&gt; list[dict[str, Any]]:\n    \"\"\"Retrieve a list of identities.\n\n    ??? info \"Endpoint\"\n        [GET /v1/identities](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/get_v1_identities)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Returns\n    -------\n    identities:\n        a list of identities\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    identities = dfi.identities.get_identities()\n    ```\n    \"\"\"\n    with self.conn.api_get(\"v1/identities\", stream=False) as response:\n        response.raise_for_status()\n        identities: list[dict[str, Any]] = response.json()\n        return identities\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.get_identity","title":"get_identity","text":"<pre><code>get_identity(identity_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Retrieve data about a specific identity.</p> Endpoint <p>GET /v1/identities/{id}</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>identity_id</code> <code>str</code> <p>an id of an identity.</p> required <p>Returns:</p> Name Type Description <code>identity</code> <code>dict[str, Any]</code> <p>the identity of the given id.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nidentity = dfi.identities.get_identity(\"&lt;identity id&gt;\")\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def get_identity(self, identity_id: str) -&gt; dict[str, Any]:\n    \"\"\"Retrieve data about a specific identity.\n\n    ??? info \"Endpoint\"\n        [GET /v1/identities/{id}](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/get_v1_identities__id_)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    identity_id:\n        an id of an identity.\n\n    Returns\n    -------\n    identity:\n        the identity of the given id.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    identity = dfi.identities.get_identity(\"&lt;identity id&gt;\")\n    ```\n    \"\"\"\n    with self.conn.api_get(\n        f\"v1/identities/{identity_id}\", stream=False\n    ) as response:\n        response.raise_for_status()\n        identity: dict[str, Any] = response.json()\n        return identity\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.get_my_identity","title":"get_my_identity","text":"<pre><code>get_my_identity() -&gt; dict[str, Any]\n</code></pre> <p>Retrieve data about the identity who made this request.</p> Endpoint <p>GET /v1/identities/me</p> <p>Returns:</p> Name Type Description <code>identity</code> <code>dict[str, Any]</code> <p>the caller's identity</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nidentity = dfi.identities.get_my_identity()\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def get_my_identity(self) -&gt; dict[str, Any]:\n    \"\"\"Retrieve data about the identity who made this request.\n\n    ??? info \"Endpoint\"\n        [GET /v1/identities/me](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/get_v1_identities_me)\n\n    Returns\n    -------\n    identity:\n        the caller's identity\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    identity = dfi.identities.get_my_identity()\n    ```\n    \"\"\"\n    with self.conn.api_get(\"v1/identities/me\", stream=False) as response:\n        response.raise_for_status()\n        identity: dict[str, Any] = response.json()\n        return identity\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.get_tokens","title":"get_tokens","text":"<pre><code>get_tokens(include_expired: bool = False) -&gt; list[dict]\n</code></pre> <p>Retrieve details about API tokens.</p> Endpoint <p>GET /v1/tokens</p> <p>Parameters:</p> Name Type Description Default <code>include_expired</code> <code>bool</code> <p>set to <code>True</code> to include expired tokens in the list.  Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>tokens</code> <code>list[dict]</code> <p>a list of API tokens.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ntokens = dfi.identities.get_tokens(include_expired=False)\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def get_tokens(self, include_expired: bool = False) -&gt; list[dict]:\n    \"\"\"Retrieve details about API tokens.\n\n    ??? info \"Endpoint\"\n        [GET /v1/tokens](https://api.prod.generalsystem.com/docs/api#/Identity%20Management%20(v1)/get_v1_tokens)\n\n    Parameters\n    ----------\n    include_expired:\n        set to `True` to include expired tokens in the list.  Defaults to False.\n\n    Returns\n    -------\n    tokens:\n        a list of API tokens.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    tokens = dfi.identities.get_tokens(include_expired=False)\n    ```\n    \"\"\"\n    params = {\"includeExpired\": str(include_expired).lower()}\n    with self.conn.api_get(\"v1/tokens\", params=params, stream=False) as response:\n        response.raise_for_status()\n        tokens: list[dict] = response.json()\n        return tokens\n</code></pre>"},{"location":"reference/services/identities/#dfi.services.identities.Identities.get_user_id","title":"get_user_id","text":"<pre><code>get_user_id(identity_id: str) -&gt; str\n</code></pre> <p>Extract the User ID from an Identity ID.</p> <p>Parameters:</p> Name Type Description Default <code>identity_id</code> <code>str</code> <p>the Identity ID to extract the matching User ID from.</p> required <p>Returns:</p> Name Type Description <code>user_id</code> <code>str</code> <p>the User ID associated to the given Identity ID</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nuser_id = dfi.identities.get_user_id(\"&lt;identity id&gt;\")\n</code></pre> Source code in <code>dfi/services/identities.py</code> <pre><code>def get_user_id(self, identity_id: str) -&gt; str:\n    \"\"\"Extract the User ID from an Identity ID.\n\n    Parameters\n    ----------\n    identity_id:\n        the Identity ID to extract the matching User ID from.\n\n    Returns\n    -------\n    user_id:\n        the User ID associated to the given Identity ID\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    user_id = dfi.identities.get_user_id(\"&lt;identity id&gt;\")\n    ```\n    \"\"\"\n    return identity_id.split(\"|\")[1]\n</code></pre>"},{"location":"reference/services/info/","title":"Info","text":""},{"location":"reference/services/info/#dfi.services.info","title":"info","text":"<p>Class for handling version information.</p>"},{"location":"reference/services/info/#dfi.services.info.Info","title":"Info","text":"<pre><code>Info(conn: Connect)\n</code></pre> <p>Class for handling version information.</p> Source code in <code>dfi/services/info.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    \"\"\"Handle queries about versions.\"\"\"\n    self.conn = conn\n</code></pre>"},{"location":"reference/services/info/#dfi.services.info.Info.api_version","title":"api_version","text":"<pre><code>api_version() -&gt; str\n</code></pre> <p>Return the version of the Data Flow Index (DFI) API.</p> Endpoint <p><code>GET version</code></p> Source code in <code>dfi/services/info.py</code> <pre><code>def api_version(self) -&gt; str:\n    \"\"\"Return the version of the Data Flow Index (DFI) API.\n\n    ??? info \"Endpoint\"\n        `GET version`\n    \"\"\"\n    with self.conn.api_get(\"version\", stream=False, params=None) as response:\n        response.raise_for_status()\n        return response.text\n</code></pre>"},{"location":"reference/services/info/#dfi.services.info.Info.product_version","title":"product_version","text":"<pre><code>product_version() -&gt; str\n</code></pre> <p>Return the Data Flow Index (DFI) product version.</p> Endpoint <p><code>GET product/version</code></p> Source code in <code>dfi/services/info.py</code> <pre><code>def product_version(self) -&gt; str:\n    \"\"\"Return the Data Flow Index (DFI) product version.\n\n    ??? info \"Endpoint\"\n        `GET product/version`\n    \"\"\"\n    with self.conn.api_get(\"product/version\", stream=False, params=None) as response:\n        response.raise_for_status()\n        return response.text\n</code></pre>"},{"location":"reference/services/info/#dfi.services.info.Info.version","title":"version","text":"<pre><code>version() -&gt; str\n</code></pre> <p>Return the version of the dfipy python library.</p> Source code in <code>dfi/services/info.py</code> <pre><code>def version(self) -&gt; str:\n    \"\"\"Return the version of the dfipy python library.\"\"\"\n    return version\n</code></pre>"},{"location":"reference/services/ingest/","title":"Ingest","text":""},{"location":"reference/services/ingest/#dfi.services.ingest","title":"ingest","text":"<p>Manages ingest of data via the Import API service.</p> Why 'Ingest' instead of 'Import' <p>The name \"ingest\" is used in place of API name \"import\" because the word \"import\" is a reserved name in Python.</p>"},{"location":"reference/services/ingest/#dfi.services.ingest.AWSCredentials","title":"AWSCredentials","text":"<pre><code>AWSCredentials(\n    role_arn: str,\n    policy: dict | None = None,\n    policy_arns: list[str] | None = None,\n)\n</code></pre> <p>A constructor class for building an AWSCredentials document.</p> <p>Parameters which point to an AWS role that the importer will assume to scan and download files. These parameters are a subset of the aws AssumeRoleCommand https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-account/classes/assumerolecommand.html</p> <p>Parameters:</p> Name Type Description Default <code>role_arn</code> <code>str</code> <p>The Amazon Resource Name (ARN) of the AWS role for us to assume.</p> required <code>policy</code> <code>dict | None</code> <p>a JSON policy that we should use when assuming the role.</p> <code>None</code> <code>policy_arns</code> <code>list[str] | None</code> <p>a list of Policy ARNs to use as managed session policies.</p> <code>None</code> <p>Examples:</p> <p><pre><code>from dfi.services.ingest import AWSCredentials\n\nrole_arn = \"arn:aws:s3:::example_bucket/example_key\"\nAWSCredentials(role_arn).build()\n</code></pre> <pre><code>{\"RoleArn\": \"arn:aws:s3:::example_bucket/example_key\"}\n</code></pre></p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(\n    self,\n    role_arn: str,\n    policy: dict | None = None,\n    policy_arns: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Initilaize class and stores values.\n\n    Parameters\n    ----------\n    role_arn:\n        The Amazon Resource Name (ARN) of the AWS role for us to assume.\n    policy:\n        a JSON policy that we should use when assuming the role.\n    policy_arns:\n        a list of Policy ARNs to use as managed session policies.\n\n    Examples\n    --------\n    ```python\n    from dfi.services.ingest import AWSCredentials\n\n    role_arn = \"arn:aws:s3:::example_bucket/example_key\"\n    AWSCredentials(role_arn).build()\n    ```\n    ```python\n    {\"RoleArn\": \"arn:aws:s3:::example_bucket/example_key\"}\n    ```\n    \"\"\"\n    self.role_arn = role_arn\n    self.policy = policy\n    self.policy_arns = policy_arns\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.AWSCredentials.build","title":"build","text":"<pre><code>build() -&gt; dict[str, Any]\n</code></pre> <p>Build an AWSCredentials document from given inputs.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def build(self) -&gt; dict[str, Any]:\n    \"\"\"Build an AWSCredentials document from given inputs.\"\"\"\n    aws_credentials: dict[str, Any] = {\"RoleArn\": self.role_arn}\n    if self.policy:\n        aws_credentials.update({\"Policy\": self.policy})\n    if self.policy_arns:\n        aws_credentials.update({\"PolicyArns\": self.policy_arns})\n\n    return aws_credentials\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.BatchS3Files","title":"BatchS3Files","text":"<pre><code>BatchS3Files(\n    bucket: str,\n    credentials: AWSCredentials,\n    glob: str,\n    prefix: str | None,\n)\n</code></pre> <p>A constructor class for building an BatchS3Files document. Indicates that this import batch should source files from S3.</p> <p>Examples:</p> <p><pre><code>from dfi.services.ingest import AWSCredentials, BatchS3Files\n\nrole_arn = \"arn:aws:s3:::example_bucket/example_key\"\ncredentials = AWSCredentials(role_arn)\nbucket = \"s3://bucket-name\"\nglob = \"*.csv\"\nprefix = \"sample-data\"\n\nBatchS3Files(bucket, credentials, glob, prefix).build()\n</code></pre> <pre><code>{\n    \"s3\": {\n        \"bucket\": \"s3://bucket-name\",\n        \"credentials\": {\n            \"RoleArn\": \"arn:aws:s3:::example_bucket/example_key\"\n        },\n        \"glob\": \"*.csv\",\n        \"prefix\": \"sample-data\",\n    }\n}\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>bucket</code> <code>str</code> <p>The S3 bucket to download files from. This can be an s3:// format url, or a full URL.</p> required <code>credentials</code> <code>AWSCredentials</code> <p>Parameters which point to an AWS role that the importer will assume to scan and download files. The <code>AWSCredentials</code> builder can help construct this document.</p> required <code>glob</code> <code>str</code> <p>A filename descriptor which indicates what format files to download.</p> <ul> <li>example: <code>**/*.csv</code></li> </ul> required <code>prefix</code> <code>str | None</code> <p>Only download files in the S3 bucket which start with this prefix.</p> required Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(\n    self, bucket: str, credentials: AWSCredentials, glob: str, prefix: str | None\n) -&gt; None:\n    \"\"\"Initilaize class and stores values.\n\n    Examples\n    --------\n    ```python\n    from dfi.services.ingest import AWSCredentials, BatchS3Files\n\n    role_arn = \"arn:aws:s3:::example_bucket/example_key\"\n    credentials = AWSCredentials(role_arn)\n    bucket = \"s3://bucket-name\"\n    glob = \"*.csv\"\n    prefix = \"sample-data\"\n\n    BatchS3Files(bucket, credentials, glob, prefix).build()\n    ```\n    ```python\n    {\n        \"s3\": {\n            \"bucket\": \"s3://bucket-name\",\n            \"credentials\": {\n                \"RoleArn\": \"arn:aws:s3:::example_bucket/example_key\"\n            },\n            \"glob\": \"*.csv\",\n            \"prefix\": \"sample-data\",\n        }\n    }\n    ```\n\n    Parameters\n    ----------\n    bucket:\n        The S3 bucket to download files from. This can be an s3:// format url, or a full URL.\n    credentials:\n        Parameters which point to an AWS role that the importer will assume to scan and download files.\n        The `AWSCredentials` builder can help construct this document.\n    glob:\n        A filename descriptor which indicates what format files to download.\n\n        - example: `**/*.csv`\n    prefix:\n        Only download files in the S3 bucket which start with this prefix.\n    \"\"\"\n    self.bucket = bucket\n    self.credentials = credentials\n    self.glob = glob\n    self.prefix = prefix\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.BatchS3Files.build","title":"build","text":"<pre><code>build() -&gt; dict[str, Any]\n</code></pre> <p>Build a BatchS3Files document from given inputs.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def build(self) -&gt; dict[str, Any]:\n    \"\"\"Build a BatchS3Files document from given inputs.\"\"\"\n    s3_source_descriptor = {\n        \"bucket\": self.bucket,\n        \"credentials\": self.credentials.build(),\n        \"glob\": self.glob,\n    }\n\n    if self.prefix:\n        s3_source_descriptor.update({\"prefix\": self.prefix})\n\n    return {\"s3\": s3_source_descriptor}\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.BatchURLFiles","title":"BatchURLFiles","text":"<pre><code>BatchURLFiles(urls: list[str])\n</code></pre> <p>A constructor class for building an BatchURLFiles document.  Indicates that this import batch should source files from a provided list of URLs.</p> <p>Examples:</p> <p>In this example, we've generated presigned URLs for 4 files on S3.  These files can now be ingested without needing to share AWS credentials. <pre><code>from dfi.services.ingest import BatchURLFiles\n\nurls = [\n    \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-1.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160635Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=f79e998106566500767b3403304e323c8ce949a1a0d98bbf4224662e605b10db\",\n    \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-2.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160658Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=516f0a60a759b134e2dcd2fbdba1b48cf618b1e870ee9b462c6fd8facca39553\",\n    \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-3.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160742Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=18071e2d0cf194a27724bdd01e20ba00537d5bdeb81f43547c52cf7e654f4577\",\n    \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-4.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160758Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=71dbfc6d32ff820fdde98c1add38ce6ad153e450a919fe9f1368a75f8d5b3765\",\n]\nBatchURLFiles(urls).build()\n</code></pre> <pre><code>{\n    \"urls\": [\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-1.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160635Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=f79e998106566500767b3403304e323c8ce949a1a0d98bbf4224662e605b10db\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-2.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160658Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=516f0a60a759b134e2dcd2fbdba1b48cf618b1e870ee9b462c6fd8facca39553\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-3.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160742Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=18071e2d0cf194a27724bdd01e20ba00537d5bdeb81f43547c52cf7e654f4577\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-4.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160758Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=71dbfc6d32ff820fdde98c1add38ce6ad153e450a919fe9f1368a75f8d5b3765\",\n    ]\n}\n</code></pre></p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(self, urls: list[str]) -&gt; None:\n    \"\"\"Initialize and store values.\n\n    Examples\n    --------\n    In this example, we've generated presigned URLs for 4 files on S3.  These files can now be ingested without\n    needing to share AWS credentials.\n    ```python\n    from dfi.services.ingest import BatchURLFiles\n\n    urls = [\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-1.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160635Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=f79e998106566500767b3403304e323c8ce949a1a0d98bbf4224662e605b10db\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-2.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160658Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=516f0a60a759b134e2dcd2fbdba1b48cf618b1e870ee9b462c6fd8facca39553\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-3.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160742Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=18071e2d0cf194a27724bdd01e20ba00537d5bdeb81f43547c52cf7e654f4577\",\n        \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-4.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160758Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=71dbfc6d32ff820fdde98c1add38ce6ad153e450a919fe9f1368a75f8d5b3765\",\n    ]\n    BatchURLFiles(urls).build()\n    ```\n    ```python\n    {\n        \"urls\": [\n            \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-1.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160635Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=f79e998106566500767b3403304e323c8ce949a1a0d98bbf4224662e605b10db\",\n            \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-2.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160658Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=516f0a60a759b134e2dcd2fbdba1b48cf618b1e870ee9b462c6fd8facca39553\",\n            \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-3.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160742Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=18071e2d0cf194a27724bdd01e20ba00537d5bdeb81f43547c52cf7e654f4577\",\n            \"https://bucket-name.s3.eu-west-2.amazonaws.com/sample-data/file-4.csv?response-content-disposition=inline&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEOX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJGMEQCICzap9Nfx0BY9IPhrWCPEWwiR4OYW%2BxxheB%2FeorchP6QAiB5lRoXq3cjr%2BTFMvjuvGoCTaMxw9T4SzbYoUzIDMtIwyqoBAiO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDY2OTM1OTQ2MDU1NCIMAGNCpXF5mRRjsS7mKvwDcOy9VbRwNRJKZFkEdUtcXHRkKTFw1t%2FSYDaqE%2BrdEhV01bV7v5uuEJQye9zI24r%2FHJvS1dolfumoaDdjkkI6%2FtODeGo0WiZsrI8yOxCFL6WCDnEIS%2F9VJpN7MdXR9kdMhPu1crhOM52PmD0QUO6jckS1RoxXyDChrW6xB9dI7w6h%2F%2B674gHg8De%2BAvJFe45eGYqPNogwLPQN4oW4jSCHPJRwhUp9h2aAEniHQzpqnFvJbbG2CsQMdf99%2FHpGyxGaIfh%2B5fm2ZOEWjWrAFxLSd1ad4uJSRLfQK8IYtgZ6dSi6B%2FcxSNY3fNFqY3ATNAiMkDFfnF%2FAVzyoPH7t6VIgG9LKTpvx8kYQdR1aonq4LDotsKwjTwUhgiYmbTcr%2FE1cIHLdErbKjlQgI%2BRX%2FrXRjQGPsEOeIIlY4OT4S%2FZgr4ZR0PkqvgNxXDiJ3frnWUW%2F8eFa%2FS4iSF%2FWHbcVYPacZSw9udBJWMVfLGWw6kXpJwpblBJC05b4NPWhrQH%2BwcJOttApbVqP7P8sbRnWM6%2BABUOtXBjh1nfO4BsZ8JvZ7PVxjGF356bRvmv7B02QQ3NJ3jZdX6SmGJuOIbk2tqDOOOx09zanbcJu%2BcqI9O%2Fhiq4zAWiuyznWDvIud37Jh8MLvB0NFeyUCKIFAHNJ8PGBJeVa56TEsv%2B4PHazwDCZ1JStBjqVAjS07YXEoBoexua24awKZlieU%2F%2B2Bj%2FY9iT7Ufyb6W0uBhAxcEw1q1K728Bn3Kkygn8iD3AZjH%2BP6421sfksEovUDsZfXt7b6v0yCK0RzUhYlAiZnd0mqmFCggJnKgG4TGL8BQ5ZdqcZDWcMAAoKYzRU7MM5u8yQxblAC3exQbR01OOBFYSiDHhtikf0AjvVS%2BzCNAdyw9%2BbdPAk%2FvE6wmOxgHUZZ7pu4ofnCs1vEDmDNP8E5wYUbcahvb98P5IcinMQvQ%2FifQDo8sE3Xhq2sOXpVE3IkTdx%2FfDGI8cuMDzVzJmI1juN53tqkixUNmIzLoNSf%2F4hBU0DOb%2BZz5Gqeu1W0jxifqOPmMU932ItuY3Wy28L8cY%3D&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20240115T160758Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=43200&amp;X-Amz-Credential=ASIAZXWHO2DFNXQNNMLW%2F20240115%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Signature=71dbfc6d32ff820fdde98c1add38ce6ad153e450a919fe9f1368a75f8d5b3765\",\n        ]\n    }\n    ```\n    \"\"\"\n    self.urls = urls\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.BatchURLFiles.build","title":"build","text":"<pre><code>build() -&gt; dict[str, Any]\n</code></pre> <p>Build a BatchURLFiles document from given inputs.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def build(self) -&gt; dict[str, Any]:\n    \"\"\"Build a BatchURLFiles document from given inputs.\"\"\"\n    return {\"urls\": self.urls}\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.CSVFormat","title":"CSVFormat","text":"<pre><code>CSVFormat(\n    entity_id: int,\n    timestamp: int,\n    longitude: int,\n    latitude: int,\n    altitude: int | None = None,\n    metadata_id: int | None = None,\n    **kwargs: int\n)\n</code></pre> <p>A constructor class for building an CSVFormat document.</p> <p>An object indicating how to map columns in a CSV file into points to be imported to the Data Flow Index</p> <p>Examples:</p> <p><pre><code>from dfi.services.ingest import CSVFormat\n\n# required fields\nentity_id = 0\ntimestamp = 1\nlongitude = 2\nlatitude = 3\n\n# extra fields\nipv4 = 4\nage = 5\nhome_ipv4 = 6\nroute_id = 7\ncredit_card_provider = 8\ntransportation_mode = 9\n\nCSVFormat(\n    entity_id=entity_id,\n    timestamp=timestamp,\n    longitude=longitude,\n    latitude=latitude,\n    ipv4=ipv4,\n    age=age,\n    home_ipv4=home_ipv4,\n    route_id=route_id,\n    credit_card_provider=credit_card_provider,\n    transportation_mode=transportation_mode,\n).build()\n</code></pre> <pre><code>{\n    \"csv\": {\n        \"entityId\": 0,\n        \"timestamp\": 1,\n        \"longitude\": 2,\n        \"latitude\": 3,\n        \"ipv4\": 4,\n        \"age\": 5,\n        \"home_ipv4\": 6,\n        \"route_id\": 7,\n        \"credit_card_provider\": 8,\n        \"transportation_mode\": 9,\n    }\n}\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>entity_id</code> <code>int</code> <p>The column number to use as the <code>entityId</code>.</p> required <code>timestamp</code> <code>int</code> <p>The column number to use as the <code>timestamp</code>.</p> required <code>longitude</code> <code>int</code> <p>The column number to use as the <code>longitude</code>.</p> required <code>latitude</code> <code>int</code> <p>The column number to use as the <code>latitude</code>.</p> required <code>kwargs</code> <code>int</code> <p>The column number to use for the given keyword argument.</p> <code>{}</code> Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(\n    self,\n    entity_id: int,\n    timestamp: int,\n    longitude: int,\n    latitude: int,\n    altitude: int | None = None,\n    metadata_id: int | None = None,\n    **kwargs: int,\n) -&gt; None:\n    \"\"\"Initialize class and store values.\n\n    Examples\n    --------\n    ```python\n    from dfi.services.ingest import CSVFormat\n\n    # required fields\n    entity_id = 0\n    timestamp = 1\n    longitude = 2\n    latitude = 3\n\n    # extra fields\n    ipv4 = 4\n    age = 5\n    home_ipv4 = 6\n    route_id = 7\n    credit_card_provider = 8\n    transportation_mode = 9\n\n    CSVFormat(\n        entity_id=entity_id,\n        timestamp=timestamp,\n        longitude=longitude,\n        latitude=latitude,\n        ipv4=ipv4,\n        age=age,\n        home_ipv4=home_ipv4,\n        route_id=route_id,\n        credit_card_provider=credit_card_provider,\n        transportation_mode=transportation_mode,\n    ).build()\n    ```\n    ```python\n    {\n        \"csv\": {\n            \"entityId\": 0,\n            \"timestamp\": 1,\n            \"longitude\": 2,\n            \"latitude\": 3,\n            \"ipv4\": 4,\n            \"age\": 5,\n            \"home_ipv4\": 6,\n            \"route_id\": 7,\n            \"credit_card_provider\": 8,\n            \"transportation_mode\": 9,\n        }\n    }\n    ```\n\n    Parameters\n    ----------\n    entity_id:\n        The column number to use as the `entityId`.\n    timestamp:\n        The column number to use as the `timestamp`.\n    longitude:\n        The column number to use as the `longitude`.\n    latitude:\n        The column number to use as the `latitude`.\n    kwargs:\n        The column number to use for the given keyword argument.\n    \"\"\"\n    self.entity_id = entity_id\n    self.timestamp = timestamp\n    self.longitude = longitude\n    self.latitude = latitude\n    self.altitude = altitude\n    self.metadata_id = metadata_id\n    self.kwargs = kwargs\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.CSVFormat.build","title":"build","text":"<pre><code>build() -&gt; dict[str, Any]\n</code></pre> <p>Build a CSVFormat document from given inputs.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def build(self) -&gt; dict[str, Any]:\n    \"\"\"Build a CSVFormat document from given inputs.\"\"\"\n    csv_format: dict[str, Any] = {\n        \"entityId\": self.entity_id,\n        \"timestamp\": self.timestamp,\n        \"longitude\": self.longitude,\n        \"latitude\": self.latitude,\n    }\n    if self.altitude:\n        csv_format.update({\"altitude\": self.altitude})\n    if self.altitude:\n        csv_format.update({\"metadataId\": self.metadata_id})\n    csv_format.update(self.kwargs)\n\n    return {\"csv\": csv_format}\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest","title":"Ingest","text":"<pre><code>Ingest(conn: Connect)\n</code></pre> <p>Class responsible for handling data ingests.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    self.conn = conn\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest.get_aws_trust_policy","title":"get_aws_trust_policy","text":"<pre><code>get_aws_trust_policy() -&gt; dict[Any, Any]\n</code></pre> <p>Retrieve the AWS Trust Policy for the Import API.</p> <p>When importing data from S3, we need to assume a role in your AWS account to be able to scan and download data. This requires adding a trust policy to be added to your role. You can get a copy of this trust policy here.</p> Endpoint <p>GET /v1/import/awsTrustPolicy</p> <p>Returns:</p> Type Description <code>trust policy</code> <p>An AWS Trust Policy for the General System API.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.ingest.get_aws_trust_policy()\n</code></pre> Source code in <code>dfi/services/ingest.py</code> <pre><code>def get_aws_trust_policy(self) -&gt; dict[Any, Any]:\n    \"\"\"Retrieve the AWS Trust Policy for the Import API.\n\n    When importing data from S3, we need to assume a role in your AWS account to be able to scan and\n    download data. This requires adding a trust policy to be added to your role. You can get a copy\n    of this trust policy here.\n\n    ??? info \"Endpoint\"\n        [GET /v1/import/awsTrustPolicy](https://api.prod.generalsystem.com/docs/api#/Data%20Import%20(v1)/get_v1_import_awsTrustPolicy)\n\n    Returns\n    -------\n    trust policy\n        An AWS Trust Policy for the General System API.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.ingest.get_aws_trust_policy()\n    ```\n    \"\"\"\n    with self.conn.api_get(\"v1/import/awsTrustPolicy\", stream=False) as response:\n        response.raise_for_status()\n        aws_trust_policy: dict[Any, Any] = response.json()\n        return aws_trust_policy\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest.get_batch_info","title":"get_batch_info","text":"<pre><code>get_batch_info(import_batch_id: str) -&gt; dict[str, Any]\n</code></pre> <p>Retrieve information about a previously created import batch.</p> Endpoint <p>GET /v1/import/batch/{id}</p> <p>Parameters:</p> Name Type Description Default <code>import_batch_id</code> <code>str</code> <p>the batch id of the import.</p> required <p>Returns:</p> Type Description <code>batch info</code> <p>information about the imported batch.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.ingest.get_batch_info(&lt;import_batch_id&gt;)\n</code></pre> Source code in <code>dfi/services/ingest.py</code> <pre><code>def get_batch_info(\n    self,\n    import_batch_id: str,\n) -&gt; dict[str, Any]:\n    \"\"\"Retrieve information about a previously created import batch.\n\n    ??? info \"Endpoint\"\n        [GET /v1/import/batch/{id}](https://api.prod.generalsystem.com/docs/api#/Data%20Import%20(v1)/get_v1_import_batch__importBatchId_)\n\n    Parameters\n    ----------\n    import_batch_id:\n        the batch id of the import.\n\n    Returns\n    -------\n    batch info\n        information about the imported batch.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.ingest.get_batch_info(&lt;import_batch_id&gt;)\n    ```\n    \"\"\"\n    with self.conn.api_get(\n        f\"v1/import/batch/{import_batch_id}\", stream=False\n    ) as response:\n        response.raise_for_status()\n        batch_info: dict[str, Any] = response.json()\n        return batch_info\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest.get_batch_status","title":"get_batch_status","text":"<pre><code>get_batch_status(\n    import_batch_id: str,\n) -&gt; list[dict[str, Any]]\n</code></pre> <p>Retrieve a chronological series of status updates about an import batch.</p> Endpoint <p>GET /v1/import/batch/{id}/status</p> <p>Parameters:</p> Name Type Description Default <code>import_batch_id</code> <code>str</code> <p>the batch id of the import.</p> required <p>Returns:</p> Type Description <code>statuses</code> <p>a list of status updates for the batch.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\ndfi.ingest.get_batch_status(&lt;import_batch_id&gt;)\n</code></pre> Source code in <code>dfi/services/ingest.py</code> <pre><code>def get_batch_status(self, import_batch_id: str) -&gt; list[dict[str, Any]]:\n    \"\"\"Retrieve a chronological series of status updates about an import batch.\n\n    ??? info \"Endpoint\"\n        [GET /v1/import/batch/{id}/status](https://api.prod.generalsystem.com/docs/api#/Data%20Import%20(v1)/get_v1_import_batch__importBatchId__status)\n\n    Parameters\n    ----------\n    import_batch_id:\n        the batch id of the import.\n\n    Returns\n    -------\n    statuses\n        a list of status updates for the batch.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n    dfi.ingest.get_batch_status(&lt;import_batch_id&gt;)\n    ```\n    \"\"\"\n    with self.conn.api_get(\n        f\"v1/import/batch/{import_batch_id}/status\", stream=False\n    ) as response:\n        response.raise_for_status()\n        batch_status: list[dict[str, Any]] = response.json()\n        return batch_status\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest.put_batch","title":"put_batch","text":"<pre><code>put_batch(\n    dataset_id: str,\n    source: BatchURLFiles | BatchS3Files,\n    file_format: CSVFormat,\n    dry_run: bool | int = False,\n) -&gt; dict[str, Any]\n</code></pre> <p>Ingest files into a GS Platform dataset.</p> <p>Ingest can be from either:</p> <ol> <li>a list of URLs - these can be pre-signed AWS S3 URLs, or any URL with open access to a CSV behind it.</li> <li>an AWS S3 bucket the user has obtained access through an AWS Trust Policy.</li> </ol> Endpoint <p>PUT /v1/import/batch</p> Tip <p>See the Ingest User Guide for full examples.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>the dataset to ingest data into.</p> required <code>source</code> <code>BatchURLFiles | BatchS3Files</code> <p>This can be either a batch of URLs pointing to files or an S3 bucket + prefix with files to be ingested.  Refer to <code>BatchURLFiles</code> or <code>BatchS3Files</code> for building the dictionary.</p> required <code>file_format</code> <code>CSVFormat</code> <p>A dictionary indicating how to map columns in a CSV file into points to be imported to the Data Flow Index.  Refer to <code>CSVFormat</code> for building the dictionary.</p> required <code>dry_run</code> <code>bool | int</code> <p>Set to <code>True</code> to perform a dry run that checks the first 100 rows of each file. Set to an integer (e.g. <code>1_000</code>) to perform a dry run that checks the first 1,000 rows of each file. No data will be imported into the Data Flow Index.</p> <code>False</code> <p>Returns:</p> Type Description <code>ingest info</code> <p>information about the ingest.  If <code>dry_run=True</code> a report of the run will be returned.</p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def put_batch(\n    self,\n    dataset_id: str,\n    source: BatchURLFiles | BatchS3Files,\n    file_format: CSVFormat,\n    dry_run: bool | int = False,\n) -&gt; dict[str, Any]:\n    \"\"\"Ingest files into a GS Platform dataset.\n\n    Ingest can be from either:\n\n    1. a list of URLs - these can be pre-signed AWS S3 URLs, or any URL with open access to a CSV behind it.\n    2. an AWS S3 bucket the user has obtained access through an AWS Trust Policy.\n\n    ??? info \"Endpoint\"\n        [PUT /v1/import/batch](https://api.prod.generalsystem.com/docs/api#/Data%20Import%20(v1)/put_v1_import_batch)\n\n    ??? tip\n        See the Ingest User Guide for full examples.\n\n    Parameters\n    ----------\n    dataset_id:\n        the dataset to ingest data into.\n    source:\n        This can be either a batch of URLs pointing to files or an S3 bucket + prefix with files\n        to be ingested.  Refer to `BatchURLFiles` or `BatchS3Files` for building the dictionary.\n    file_format:\n        A dictionary indicating how to map columns in a CSV file into points to be imported to\n        the Data Flow Index.  Refer to `CSVFormat` for building the dictionary.\n    dry_run:\n        Set to `True` to perform a dry run that checks the first 100 rows of each file.\n        Set to an integer (e.g. `1_000`) to perform a dry run that checks the first 1,000 rows of each file.\n        No data will be imported into the Data Flow Index.\n\n    Returns\n    -------\n    ingest info\n        information about the ingest.  If `dry_run=True` a report of the run will be returned.\n    \"\"\"\n    if isinstance(source, BatchS3Files):\n        raise NotImplementedError(\n            \"'BatchS3Files` stubs are present but not yet implemented.  Instead use `BatchURLFiles`.\"\n        )\n\n    payload = {\n        \"datasetId\": dataset_id,\n        \"source\": source.build(),\n        \"format\": file_format.build(),\n    }\n\n    # requests will serialize True / False into \"True\" / \"False\", which is not a JSON boolean\n    params = {\"dryRun\": json.dumps(dry_run)}\n\n    with self.conn.api_put(\n        \"v1/import/batch\", params=params, json=payload, stream=False\n    ) as response:\n        response.raise_for_status()\n        ingest_info: dict[str, Any] = response.json()\n        return ingest_info\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.Ingest.update_batch_status","title":"update_batch_status","text":"<pre><code>update_batch_status(\n    import_batch_id: str, status: str\n) -&gt; dict[str, str]\n</code></pre> <p>Update information about a previously created import batch.</p> Endpoint <p>PATCH /v1/import/batch/{id}</p> Aborting an import <p>This route can be used to abort an in-progress batch by setting the <code>status</code> field to <code>aborted</code>.</p> <p>Parameters:</p> Name Type Description Default <code>import_batch_id</code> <code>str</code> <p>the batch id of the import.</p> required <code>status</code> <code>str</code> <p>the status to update the import to.  One of [<code>aborted</code>]</p> required <p>Returns:</p> Type Description <code>status</code> <p>the updated status of the batch</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nstatus = \"aborted\"\ndfi.ingest.update_batch_status(&lt;import_batch_id&gt;, status)\n</code></pre> Source code in <code>dfi/services/ingest.py</code> <pre><code>def update_batch_status(self, import_batch_id: str, status: str) -&gt; dict[str, str]:\n    \"\"\"Update information about a previously created import batch.\n\n    ??? info \"Endpoint\"\n        [PATCH /v1/import/batch/{id}](https://api.prod.generalsystem.com/docs/api#/Data%20Import%20(v1)/patch_v1_import_batch__importBatchId_)\n\n    ??? note \"Aborting an import\"\n        This route can be used to abort an in-progress batch by setting the `status` field to `aborted`.\n\n    Parameters\n    ----------\n    import_batch_id:\n        the batch id of the import.\n    status:\n        the status to update the import to.  One of [`aborted`]\n\n    Returns\n    -------\n    status\n        the updated status of the batch\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    status = \"aborted\"\n    dfi.ingest.update_batch_status(&lt;import_batch_id&gt;, status)\n    ```\n    \"\"\"\n    body = {\"status\": status}\n    with self.conn.api_patch(\n        f\"v1/import/batch/{import_batch_id}\", json=body, stream=False\n    ) as response:\n        response.raise_for_status()\n        batch_status: dict[str, str] = response.json()\n        return batch_status\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.S3URLPresigner","title":"S3URLPresigner","text":"<pre><code>S3URLPresigner(\n    bucket: str, region: str, profile: str | None\n)\n</code></pre> <p>For creating presigned URLs to objects in AWS S3.</p> <p>Parameters:</p> Name Type Description Default <code>bucket</code> <code>str</code> <p>S3 bucket.</p> required <code>region</code> <code>str</code> <p>S3 region.</p> required <code>profile</code> <code>str | None</code> <p>S3 profile to use when accessing resources.</p> required Source code in <code>dfi/services/ingest.py</code> <pre><code>def __init__(self, bucket: str, region: str, profile: str | None) -&gt; None:\n    \"\"\"Initialize and store paramters and create a connection to AWS S3.\n\n    Parameters\n    ----------\n    bucket:\n        S3 bucket.\n    region:\n        S3 region.\n    profile:\n        S3 profile to use when accessing resources.\n    \"\"\"\n    self.bucket = bucket\n    self.region = region\n    self.profile = profile\n\n    boto3.setup_default_session(profile_name=self.profile)\n    config = Config(region_name=self.region, signature_version=\"s3v4\")\n\n    self.s3_client = boto3.client(\"s3\", config=config)\n    self.s3_resource = boto3.resource(\"s3\", config=config)\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.S3URLPresigner.find_files","title":"find_files","text":"<pre><code>find_files(\n    prefix: str,\n    suffix: str,\n    sort: bool = True,\n    verbose: bool = False,\n) -&gt; list[str]\n</code></pre> <p>Globs for files in S3 Bucket/Prefix ending with suffix.  Will sort files by name using natural sort.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>S3 prefix to search in.</p> required <code>suffix</code> <code>str</code> <p>Will search for files ending with <code>suffix</code>.  Example: suffix=<code>\".csv\"</code> will find files inding in <code>\".csv\"</code>.</p> required <code>sort</code> <code>bool</code> <p>Whether to sort the files.  Sort is done via natural sort.</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>If <code>True</code>, will show a progress bar.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>files</code> <code>list[str]</code> <p>A List of files found in the S3 bucket.</p> <p>Examples:</p> <p>The example below will find all CSV files (files ending with <code>\".csv\"</code>) in <code>\"s3://datasets/dataset-1\"</code>. <pre><code>from dfi.services.ingest import S3URLPresigner\n\nbucket = \"datasets\"\nregion = \"eu-west-2\"\nprofile = \"default\"\n\ns3_presigner = S3URLPresigner(bucket, region, profile)\n\nfiles = s3_presigner.list_files(object_key, expiration=720)\n</code></pre></p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def find_files(\n    self, prefix: str, suffix: str, sort: bool = True, verbose: bool = False\n) -&gt; list[str]:\n    \"\"\"Globs for files in S3 Bucket/Prefix ending with suffix.  Will sort files by name using natural sort.\n\n    Parameters\n    ----------\n    prefix:\n        S3 prefix to search in.\n    suffix:\n        Will search for files ending with `suffix`.  Example: suffix=`\".csv\"` will find files inding in `\".csv\"`.\n    sort:\n        Whether to sort the files.  Sort is done via natural sort.\n    verbose:\n        If `True`, will show a progress bar.\n\n    Returns\n    -------\n    files:\n        A List of files found in the S3 bucket.\n\n    Examples\n    --------\n    The example below will find all CSV files (files ending with `\".csv\"`) in `\"s3://datasets/dataset-1\"`.\n    ```python\n    from dfi.services.ingest import S3URLPresigner\n\n    bucket = \"datasets\"\n    region = \"eu-west-2\"\n    profile = \"default\"\n\n    s3_presigner = S3URLPresigner(bucket, region, profile)\n\n    files = s3_presigner.list_files(object_key, expiration=720)\n    ```\n    \"\"\"\n    bucket = self.s3_resource.Bucket(self.bucket)\n\n    files = []\n    for s3_object in tqdm(\n        bucket.objects.filter(Prefix=prefix),\n        desc=f\"Globbing files ending with '{suffix}' in '{self.bucket}/{prefix}'\",\n        disable=not verbose,\n    ):\n        if s3_object.key.endswith(suffix):\n            files.append(s3_object.key)\n\n    if sort:\n        files = natsort.natsorted(files)\n    return files\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.S3URLPresigner.generate_presigned_url","title":"generate_presigned_url","text":"<pre><code>generate_presigned_url(\n    object_key: str, expiration: int\n) -&gt; str\n</code></pre> <p>Create a presigned URL for the key.</p> <p>Parameters:</p> Name Type Description Default <code>object_key</code> <code>str</code> <p>S3 object key.</p> required <code>expiration</code> <code>int</code> <p>Time in minutes for the presigned URL to remain valid.  min=1, max=720</p> required <p>Returns:</p> Type Description <code>presigned URL</code> <p>URL will be valid for the set <code>expiration</code> time.</p> <p>Examples:</p> <p>The example below will generate a presigned URL for <code>\"s3://datasets/dataset-1/file-1.csv\"</code>. <pre><code>from dfi.services.ingest import S3URLPresigner\n\nbucket = \"datasets\"\nregion = \"eu-west-2\"\nprofile = \"default\"\ns3_presigner = S3URLPresigner(bucket, region, profile)\n\nobject_key = \"dataset-1/file-1.csv\"\npresigned_url = s3_presigner.generate_presigned_url(\n    object_key, expiration=720\n)\n</code></pre></p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def generate_presigned_url(\n    self,\n    object_key: str,\n    expiration: int,\n) -&gt; str:\n    \"\"\"Create a presigned URL for the key.\n\n    Parameters\n    ----------\n    object_key:\n        S3 object key.\n    expiration:\n        Time in minutes for the presigned URL to remain valid.  min=1, max=720\n\n    Returns\n    -------\n    presigned URL\n        URL will be valid for the set `expiration` time.\n\n    Examples\n    --------\n    The example below will generate a presigned URL for `\"s3://datasets/dataset-1/file-1.csv\"`.\n    ```python\n    from dfi.services.ingest import S3URLPresigner\n\n    bucket = \"datasets\"\n    region = \"eu-west-2\"\n    profile = \"default\"\n    s3_presigner = S3URLPresigner(bucket, region, profile)\n\n    object_key = \"dataset-1/file-1.csv\"\n    presigned_url = s3_presigner.generate_presigned_url(\n        object_key, expiration=720\n    )\n    ```\n    \"\"\"\n    presigned_urls: str = self.s3_client.generate_presigned_url(\n        \"get_object\",\n        Params={\"Bucket\": self.bucket, \"Key\": object_key},\n        ExpiresIn=expiration,\n    )\n    return presigned_urls\n</code></pre>"},{"location":"reference/services/ingest/#dfi.services.ingest.S3URLPresigner.generate_presigned_urls","title":"generate_presigned_urls","text":"<pre><code>generate_presigned_urls(\n    prefix: str,\n    suffix: str,\n    expiration: int,\n    sort: bool = True,\n    verbose: bool = False,\n) -&gt; list[str]\n</code></pre> <p>Create presigned URLs matching the glob pattern in the bucket.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>S3 object prefix</p> required <code>suffix</code> <code>str</code> <p>Suffix patten to search during glob</p> required <code>expiration</code> <code>int</code> <p>Time in minutes for the presigned URL to remain valid.  min=1, max=720</p> required <code>sort</code> <code>bool</code> <p>Whether to sort the files.  Sort is done via natural sort.</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>If true, will show a progress bar.</p> <code>False</code> <p>Returns:</p> Type Description <code>presigned URLs</code> <p>A list of presigned URLs. If error, returns <code>None</code>.</p> <p>Examples:</p> <p>The example below will generate presigned URLs for all CSV files (files ending with <code>\".csv\"</code>)     in <code>s3://datasets/dataset-1</code>. <pre><code>from dfi.services.ingest import S3URLPresigner\n\nbucket = \"datasets\"\nregion = \"eu-west-2\"\nprofile = \"default\"\nprefix = \"dataset-1\"\n\ns3_presigner = S3URLPresigner(bucket, region, profile)\npresigned_urls = s3_presigner.generate_presigned_urls(\n    prefix, \".csv\", expiration=720, sort=True, verbose=False\n)\n</code></pre></p> Source code in <code>dfi/services/ingest.py</code> <pre><code>def generate_presigned_urls(\n    self,\n    prefix: str,\n    suffix: str,\n    expiration: int,\n    sort: bool = True,\n    verbose: bool = False,\n) -&gt; list[str]:\n    \"\"\"Create presigned URLs matching the glob pattern in the bucket.\n\n    Parameters\n    ----------\n    prefix:\n        S3 object prefix\n    suffix:\n        Suffix patten to search during glob\n    expiration:\n        Time in minutes for the presigned URL to remain valid.  min=1, max=720\n    sort:\n        Whether to sort the files.  Sort is done via natural sort.\n    verbose:\n        If true, will show a progress bar.\n\n    Returns\n    -------\n    presigned URLs\n        A list of presigned URLs. If error, returns `None`.\n\n    Examples\n    --------\n    The example below will generate presigned URLs for all CSV files (files ending with `\".csv\"`)\n        in `s3://datasets/dataset-1`.\n    ```python\n    from dfi.services.ingest import S3URLPresigner\n\n    bucket = \"datasets\"\n    region = \"eu-west-2\"\n    profile = \"default\"\n    prefix = \"dataset-1\"\n\n    s3_presigner = S3URLPresigner(bucket, region, profile)\n    presigned_urls = s3_presigner.generate_presigned_urls(\n        prefix, \".csv\", expiration=720, sort=True, verbose=False\n    )\n    ```\n    \"\"\"\n    files = self.find_files(prefix, suffix, sort=sort, verbose=verbose)\n\n    presigned_urls = []\n    for file in tqdm(files, desc=\"Presigning URLs\", disable=not verbose):\n        url = self.s3_client.generate_presigned_url(\n            \"get_object\",\n            Params={\"Bucket\": self.bucket, \"Key\": file},\n            ExpiresIn=expiration,\n        )\n        presigned_urls.append(url)\n\n    return presigned_urls\n</code></pre>"},{"location":"reference/services/query/","title":"Query","text":""},{"location":"reference/services/query/#dfi.services.query","title":"query","text":"<p>Class for querying for data with DFI Query V1 API.</p>"},{"location":"reference/services/query/#dfi.services.query.Query","title":"Query","text":"<pre><code>Query(conn: Connect)\n</code></pre> <p>Class responsible for requests to the Query V1 DFI API.</p> <p>It can be accessed via the a dfi.Client class instance or it must be instantiated with a dfi.Connect instance as argument.</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>Connect</code> <p>a Connect instance.</p> required Source code in <code>dfi/services/query.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    \"\"\"Handle queries to DFI Query V1 API.\n\n    Parameters\n    ----------\n    conn:\n        a Connect instance.\n    \"\"\"\n    self.conn = conn\n    self._document: dict | None = None\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.document","title":"document  <code>property</code>","text":"<pre><code>document: dict | None\n</code></pre> <p>The Query Document used in the last query for data.</p>"},{"location":"reference/services/query/#dfi.services.query.Query.count","title":"count","text":"<pre><code>count(\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n) -&gt; int\n</code></pre> <p>Query for the number of records within the filter bounds.</p> Endpoint <p>POST /v1/query</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>the dataset to be queried.</p> required <code>uids</code> <code>list[str | int] | None</code> <p>specifies which uids to search for.</p> <code>None</code> <code>geometry</code> <code>Polygon | BBox | None</code> <p>specifies the spatial bounds to search within.</p> <code>None</code> <code>time_range</code> <code>TimeRange | None</code> <p>specifies the time bounds to search within.</p> <code>None</code> <code>filter_fields</code> <code>list[FilterField] | None</code> <p>specifies filters on Filter Fields.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>count</code> <code>int</code> <p>The number of records stored in the DFI engine.</p> <p>Raises:</p> Type Description <code>DFIResponseError</code> <code>TimeRangeUndefinedError</code> <code>PolygonUndefinedError</code> <code>BBoxUndefinedError</code> <code>ValueError</code> <p>Examples:</p> <pre><code>from dfi import Client\nfrom dfi.models.filters import TimeRange\nfrom dfi.models.filters.geometry import Polygon\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\ndataset_id = \"&lt;dataset id&gt;\"\n\nuids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\ntime_range = TimeRange().from_strings(\n    min_time=\"2022-01-01T08:00:00Z\",\n    max_time=\"2022-02-01T08:00:00Z\",\n)\n\ncoordinates = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [1.0, 1.0],\n    [0.0, 1.0],\n    [0.0, 0.0],\n]\ngeometry = Polygon().from_raw_coords(\n    coordinates, geojson=True\n)\n\ndfi.query.count(\n    dataset_id,\n    uids=uids,\n    time_range=time_range,\n    geometry=geometry,\n)\n</code></pre> Source code in <code>dfi/services/query.py</code> <pre><code>def count(\n    self,\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n) -&gt; int:\n    \"\"\"Query for the number of records within the filter bounds.\n\n    ??? info \"Endpoint\"\n        [POST /v1/query](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/post_v1_query)\n\n    Parameters\n    ----------\n    dataset_id:\n        the dataset to be queried.\n    uids:\n        specifies which uids to search for.\n    geometry:\n        specifies the spatial bounds to search within.\n    time_range:\n        specifies the time bounds to search within.\n    filter_fields:\n        specifies filters on Filter Fields.\n\n    Returns\n    -------\n    count:\n        The number of records stored in the DFI engine.\n\n    Raises\n    ------\n    DFIResponseError\n    TimeRangeUndefinedError\n    PolygonUndefinedError\n    BBoxUndefinedError\n    ValueError\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n    from dfi.models.filters import TimeRange\n    from dfi.models.filters.geometry import Polygon\n\n    dfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\n    dataset_id = \"&lt;dataset id&gt;\"\n\n    uids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\n    time_range = TimeRange().from_strings(\n        min_time=\"2022-01-01T08:00:00Z\",\n        max_time=\"2022-02-01T08:00:00Z\",\n    )\n\n    coordinates = [\n        [0.0, 0.0],\n        [1.0, 0.0],\n        [1.0, 1.0],\n        [0.0, 1.0],\n        [0.0, 0.0],\n    ]\n    geometry = Polygon().from_raw_coords(\n        coordinates, geojson=True\n    )\n\n    dfi.query.count(\n        dataset_id,\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n    )\n    ```\n    \"\"\"\n    query_doc = QueryDocument(\n        dataset_id=dataset_id,\n        return_model=Count(),\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n        filter_fields=filter_fields,\n    )\n    self._document = query_doc.build()\n\n    with self.conn.api_post(\"v1/query\", json=self._document) as response:\n        client = SSEClient(response)  # type: ignore[arg-type]\n        return self._receive_counts(client)\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.instrumentation","title":"instrumentation","text":"<pre><code>instrumentation(\n    dataset_id: str | None = None,\n    identity_id: str | None = None,\n    before: str | None = None,\n    page_size: int | None = None,\n) -&gt; list[dict]\n</code></pre> <p>Retrieve a list of queries made to datasets.</p> <p>By default this will return a list of the 100 most recent queries to any dataset. Information about the queries can be retrieved by utilizing the <code>before</code> and <code>page_size</code> parameters to select a page of information.</p> Endpoint <p>GET /v1/query/instrumentation</p> Tenant Admins <p>Tenant admins will be able to see any query ran on any dataset in their tenant. - filter by dataset - filter by identity</p> Non-Admins <p>Non-admins will only see their own queries. - filter by dataset</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str | None</code> <p>Filter results to only include this dataset.</p> <code>None</code> <code>identity_id</code> <code>str | None</code> <p>Filter results to only include this identity.</p> <code>None</code> <code>before</code> <code>str | None</code> <p>ISO 8601 string. Only retrieve items created before this given time. Defaults to now.</p> <code>None</code> <code>page_size</code> <code>int | None</code> <p>Number of items to return in the response. Maximum is 500. Default is 100 if omitted.</p> <code>None</code> <p>Raises:</p> Type Description <code>DFIResponseError</code> <p>Examples:</p> <p><pre><code>from dfi import Client\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\ndfi.query.instrumentation()\n</code></pre> <pre><code>[\n    {\n        \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n        \"datasetId\": \"gs.dfi\",\n        \"apiVersion\": \"5.0.2\",\n        \"responseType\": \"count\",\n        \"result\": \"success\",\n        \"idCount\": 0,\n        \"timeRange\": None,\n        \"fieldCount\": 0,\n        \"polygonSize\": 0,\n        \"polygonArea\": 0,\n        \"ingressTime\": 1708544552000,\n        \"issuedElapsed\": 8,\n        \"firstByteElapsed\": 154,\n        \"lastByteElapsed\": 154,\n    },\n    {\n        \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n        \"datasetId\": \"gs.test-dataset\",\n        \"apiVersion\": \"5.0.2\",\n        \"responseType\": \"items\",\n        \"result\": \"success\",\n        \"idCount\": 0,\n        \"timeRange\": None,\n        \"fieldCount\": 0,\n        \"polygonSize\": 0,\n        \"polygonArea\": 0,\n        \"ingressTime\": 1708541136914,\n        \"issuedElapsed\": 40,\n        \"firstByteElapsed\": 154,\n        \"lastByteElapsed\": 412,\n    },\n    {\n        \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n        \"datasetId\": \"gs.test-dataset\",\n        \"apiVersion\": \"5.0.2\",\n        \"responseType\": \"itemsWithoutPayload\",\n        \"result\": \"success\",\n        \"idCount\": 0,\n        \"timeRange\": None,\n        \"fieldCount\": 0,\n        \"polygonSize\": 0,\n        \"polygonArea\": 0,\n        \"ingressTime\": 1708541108892,\n        \"issuedElapsed\": 11,\n        \"firstByteElapsed\": 156,\n        \"lastByteElapsed\": 255,\n    },\n    {\n        \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n        \"datasetId\": \"gs.test-dataset\",\n        \"apiVersion\": \"5.0.2\",\n        \"responseType\": \"entities\",\n        \"result\": \"success\",\n        \"idCount\": 1,\n        \"timeRange\": 2678400000,\n        \"fieldCount\": 1,\n        \"polygonSize\": 5,\n        \"polygonArea\": 12391399902,\n        \"ingressTime\": 1708540985751,\n        \"issuedElapsed\": 8,\n        \"firstByteElapsed\": 151,\n        \"lastByteElapsed\": 151,\n    },\n]\n</code></pre></p> Source code in <code>dfi/services/query.py</code> <pre><code>def instrumentation(\n    self,\n    dataset_id: str | None = None,\n    identity_id: str | None = None,\n    before: str | None = None,\n    page_size: int | None = None,\n) -&gt; list[dict]:  # type: ignore[type-arg]\n    \"\"\"Retrieve a list of queries made to datasets.\n\n    By default this will return a list of the 100 most recent queries to any dataset.\n    Information about the queries can be retrieved by utilizing the `before` and `page_size` parameters\n    to select a page of information.\n\n    ??? info \"Endpoint\"\n        [GET /v1/query/instrumentation](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/get_v1_query_instrumentation)\n\n    ??? tip \"Tenant Admins\"\n        Tenant admins will be able to see any query ran on any dataset in their tenant.\n        - filter by dataset\n        - filter by identity\n\n    ??? tip \"Non-Admins\"\n        Non-admins will only see their own queries.\n        - filter by dataset\n\n    Parameters\n    ----------\n    dataset_id:\n        Filter results to only include this dataset.\n    identity_id:\n        Filter results to only include this identity.\n    before:\n        [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string. Only retrieve items created before this given time. Defaults to now.\n    page_size:\n        Number of items to return in the response. Maximum is 500. Default is 100 if omitted.\n\n    Raises\n    ------\n    DFIResponseError\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\n    dfi.query.instrumentation()\n    ```\n    ```python\n    [\n        {\n            \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n            \"datasetId\": \"gs.dfi\",\n            \"apiVersion\": \"5.0.2\",\n            \"responseType\": \"count\",\n            \"result\": \"success\",\n            \"idCount\": 0,\n            \"timeRange\": None,\n            \"fieldCount\": 0,\n            \"polygonSize\": 0,\n            \"polygonArea\": 0,\n            \"ingressTime\": 1708544552000,\n            \"issuedElapsed\": 8,\n            \"firstByteElapsed\": 154,\n            \"lastByteElapsed\": 154,\n        },\n        {\n            \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n            \"datasetId\": \"gs.test-dataset\",\n            \"apiVersion\": \"5.0.2\",\n            \"responseType\": \"items\",\n            \"result\": \"success\",\n            \"idCount\": 0,\n            \"timeRange\": None,\n            \"fieldCount\": 0,\n            \"polygonSize\": 0,\n            \"polygonArea\": 0,\n            \"ingressTime\": 1708541136914,\n            \"issuedElapsed\": 40,\n            \"firstByteElapsed\": 154,\n            \"lastByteElapsed\": 412,\n        },\n        {\n            \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n            \"datasetId\": \"gs.test-dataset\",\n            \"apiVersion\": \"5.0.2\",\n            \"responseType\": \"itemsWithoutPayload\",\n            \"result\": \"success\",\n            \"idCount\": 0,\n            \"timeRange\": None,\n            \"fieldCount\": 0,\n            \"polygonSize\": 0,\n            \"polygonArea\": 0,\n            \"ingressTime\": 1708541108892,\n            \"issuedElapsed\": 11,\n            \"firstByteElapsed\": 156,\n            \"lastByteElapsed\": 255,\n        },\n        {\n            \"identityId\": \"user|0ffb434d-f319-463a-8cf1-6ff939244486\",\n            \"datasetId\": \"gs.test-dataset\",\n            \"apiVersion\": \"5.0.2\",\n            \"responseType\": \"entities\",\n            \"result\": \"success\",\n            \"idCount\": 1,\n            \"timeRange\": 2678400000,\n            \"fieldCount\": 1,\n            \"polygonSize\": 5,\n            \"polygonArea\": 12391399902,\n            \"ingressTime\": 1708540985751,\n            \"issuedElapsed\": 8,\n            \"firstByteElapsed\": 151,\n            \"lastByteElapsed\": 151,\n        },\n    ]\n    ```\n    \"\"\"\n    params = {\n        \"identityId\": identity_id,\n        \"datasetId\": dataset_id,\n        \"before\": before,\n        \"pageSize\": page_size,\n    }\n    with self.conn.api_get(\n        \"v1/query/instrumentation\", params=params, stream=False\n    ) as response:\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.manage","title":"manage","text":"<pre><code>manage(dataset_id: str, operation: str) -&gt; dict[str, str]\n</code></pre> <p>Run a data management query.</p> <p>This allows you to perform data management operations on a dataset. All operations are irrevokable and cannot be undone.</p> Endpoint <p>POST /v1/query/manage</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>Filter results to only include this dataset.</p> required <code>operation</code> <code>str</code> <p>The operation to perform.  Supported operations are</p> <ul> <li><code>truncate</code> - Remove all data from this dataset</li> </ul> required <p>Examples:</p> <p><pre><code>from dfi import Client\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\ndataset_id = \"&lt;dataset id&gt;\"\noperation = \"truncate\"\ndfi.query.manage(dataset_id, operation)\n</code></pre> <pre><code>{\n    \"status\": \"success\"\n}\n</code></pre></p> Source code in <code>dfi/services/query.py</code> <pre><code>def manage(self, dataset_id: str, operation: str) -&gt; dict[str, str]:  # type: ignore[type-arg]\n    \"\"\"Run a data management query.\n\n    This allows you to perform data management operations on a dataset.\n    **All operations are irrevokable and cannot be undone.**\n\n    ??? info \"Endpoint\"\n        [POST /v1/query/manage](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/post_v1_query_manage)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    dataset_id:\n        Filter results to only include this dataset.\n    operation:\n        The operation to perform.  Supported operations are\n\n        - `truncate` - Remove all data from this dataset\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\n    dataset_id = \"&lt;dataset id&gt;\"\n    operation = \"truncate\"\n    dfi.query.manage(dataset_id, operation)\n    ```\n    ```python\n    {\n        \"status\": \"success\"\n    }\n    ```\n    \"\"\"\n    body = {\n        \"datasetId\": dataset_id,\n        \"operation\": operation,\n    }\n    with self.conn.api_post(\"v1/query/manage\", json=body, stream=False) as response:\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.raw_request","title":"raw_request","text":"<pre><code>raw_request(\n    document: dict[str, Any]\n) -&gt; DataFrame | list[str] | int\n</code></pre> <p>Provide an escape hatch for those who definitely, absolutely, 100% know what they're doing.</p> <p>No validation of the query document is done before saying sending off the request. The \"hold my beer\" of queries.</p> Endpoint <p>POST /v1/query</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>dict[str, Any]</code> <p>The full request body for POST /v1/query.</p> required Source code in <code>dfi/services/query.py</code> <pre><code>def raw_request(self, document: dict[str, Any]) -&gt; pd.DataFrame | list[str] | int:\n    \"\"\"Provide an escape hatch for those who definitely, absolutely, 100% know what they're doing.\n\n    No validation of the query document is done before saying sending off the request.\n    The \"hold my beer\" of queries.\n\n    ??? info \"Endpoint\"\n        [POST /v1/query](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/post_v1_query)\n\n    Parameters\n    ----------\n    document:\n        The full request body for POST /v1/query.\n    \"\"\"\n    self._document = document\n\n    with self.conn.api_post(\"v1/query\", json=document) as response:\n        client = SSEClient(response)  # type: ignore[arg-type]\n        match document:\n            case {\"return\": {\"type\": \"count\", \"groupBy\": {\"type\": \"uniqueId\"}}}:\n                return self._receive_unique_id_counts(client)\n            case {\"return\": \"count\"} | {\"return\": {\"type\": \"count\"}}:\n                return self._receive_counts(client)\n            case {\"return\": {\"type\": \"records\"}}:\n                return self._receive_records(client)\n            case _:\n                # This will only happen in DFI API adds new return types before dfipy is updated.\n                raise ValueError(\"Unknown return type.\")\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.records","title":"records","text":"<pre><code>records(\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    only: Only | str | None = None,\n    filter_fields: list[FilterField] | None = None,\n    include: list[IncludeField | str] | None = None,\n) -&gt; DataFrame\n</code></pre> <p>Query for the records within the filter bounds.</p> Endpoint <p>POST /v1/query</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>the dataset to be queried.</p> required <code>uids</code> <code>list[str | int] | None</code> <p>specifies which uids to search for.</p> <code>None</code> <code>geometry</code> <code>Polygon | BBox | None</code> <p>specifies the spatial bounds to search within.</p> <code>None</code> <code>time_range</code> <code>TimeRange | None</code> <p>specifies the time bounds to search within.</p> <code>None</code> <code>only</code> <code>Only | str | None</code> <p>specifies that only the newest or oldest record is retuned.</p> <code>None</code> <code>filter_fields</code> <code>list[FilterField] | None</code> <p>specifies filters on Filter Fields.</p> <code>None</code> <code>include</code> <code>list[IncludeField | str] | None</code> <p>specifies the extra fields to include in the returned results.</p> <code>None</code> <p>Returns:</p> Type Description <code>records</code> <p>The count of records for each id within the bounds.</p> <p>Raises:</p> Type Description <code>DFIResponseError</code> <code>TimeRangeUndefinedError</code> <code>PolygonUndefinedError</code> <code>BBoxUndefinedError</code> <code>ValueError</code> <p>Examples:</p> <pre><code>from dfi import Client\nfrom dfi.models.filters import Only, TimeRange\nfrom dfi.models.filters.geometry import Polygon\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\ndataset_id = \"&lt;dataset id&gt;\"\n\nuids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\ntime_range = TimeRange().from_strings(\n    min_time=\"2022-01-01T08:00:00Z\",\n    max_time=\"2022-02-01T08:00:00Z\",\n)\n\ncoordinates = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [1.0, 1.0],\n    [0.0, 1.0],\n    [0.0, 0.0],\n]\npolygon = Polygon().from_raw_coords(\n    coordinates, geojson=True\n)\n\ndfi.query.records(\n    dataset_id,\n    uids=uids,\n    time_range=time_range,\n    geometry=geometry,\n    only=\"newest\",\n    include=[\"fields\", \"metadataId\"],\n)\n</code></pre> Source code in <code>dfi/services/query.py</code> <pre><code>def records(\n    self,\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    only: Only | str | None = None,\n    filter_fields: list[FilterField] | None = None,\n    include: list[IncludeField | str] | None = None,\n) -&gt; pd.DataFrame:\n    \"\"\"Query for the records within the filter bounds.\n\n    ??? info \"Endpoint\"\n        [POST /v1/query](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/post_v1_query)\n\n    Parameters\n    ----------\n    dataset_id:\n        the dataset to be queried.\n    uids:\n        specifies which uids to search for.\n    geometry:\n        specifies the spatial bounds to search within.\n    time_range:\n        specifies the time bounds to search within.\n    only:\n        specifies that only the newest or oldest record is retuned.\n    filter_fields:\n        specifies filters on Filter Fields.\n    include:\n        specifies the extra fields to include in the returned results.\n\n    Returns\n    -------\n    records\n        The count of records for each id within the bounds.\n\n    Raises\n    ------\n    DFIResponseError\n    TimeRangeUndefinedError\n    PolygonUndefinedError\n    BBoxUndefinedError\n    ValueError\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n    from dfi.models.filters import Only, TimeRange\n    from dfi.models.filters.geometry import Polygon\n\n    dfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\n    dataset_id = \"&lt;dataset id&gt;\"\n\n    uids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\n    time_range = TimeRange().from_strings(\n        min_time=\"2022-01-01T08:00:00Z\",\n        max_time=\"2022-02-01T08:00:00Z\",\n    )\n\n    coordinates = [\n        [0.0, 0.0],\n        [1.0, 0.0],\n        [1.0, 1.0],\n        [0.0, 1.0],\n        [0.0, 0.0],\n    ]\n    polygon = Polygon().from_raw_coords(\n        coordinates, geojson=True\n    )\n\n    dfi.query.records(\n        dataset_id,\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n        only=\"newest\",\n        include=[\"fields\", \"metadataId\"],\n    )\n    ```\n    \"\"\"\n    query_doc = QueryDocument(\n        dataset_id=dataset_id,\n        return_model=Records(include=include),\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n        only=only,\n        filter_fields=filter_fields,\n    )\n    self._document = query_doc.build()\n\n    with self.conn.api_post(\"v1/query\", json=self._document) as response:\n        client = SSEClient(response)  # type: ignore[arg-type]\n        return self._receive_records(client)\n</code></pre>"},{"location":"reference/services/query/#dfi.services.query.Query.unique_id_counts","title":"unique_id_counts","text":"<pre><code>unique_id_counts(\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n) -&gt; dict[str | int, int]\n</code></pre> <p>Query for the number of records for each id within the filter bounds.</p> Endpoint <p>POST /v1/query</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str</code> <p>the dataset to be queried.</p> required <code>uids</code> <code>list[str | int] | None</code> <p>specifies which uids to search for.</p> <code>None</code> <code>geometry</code> <code>Polygon | BBox | None</code> <p>specifies the spatial bounds to search within.</p> <code>None</code> <code>time_range</code> <code>TimeRange | None</code> <p>specifies the time bounds to search within.</p> <code>None</code> <code>filter_fields</code> <code>list[FilterField] | None</code> <p>specifies filters on Filter Fields.</p> <code>None</code> <p>Returns:</p> Type Description <code>unique ids count</code> <p>The count of records for each id within the bounds.</p> <p>Raises:</p> Type Description <code>DFIResponseError</code> <code>TimeRangeUndefinedError</code> <code>PolygonUndefinedError</code> <code>BBoxUndefinedError</code> <code>ValueError</code> <p>Examples:</p> <pre><code>from dfi import Client\nfrom dfi.models.filters import TimeRange\nfrom dfi.models.filters.geometry import Polygon\n\ndfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\ndataset_id = \"&lt;dataset id&gt;\"\n\nuids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\ntime_range = TimeRange().from_strings(\n    min_time=\"2022-01-01T08:00:00Z\",\n    max_time=\"2022-02-01T08:00:00Z\",\n)\n\ncoordinates = [\n    [0.0, 0.0],\n    [1.0, 0.0],\n    [1.0, 1.0],\n    [0.0, 1.0],\n    [0.0, 0.0],\n]\npolygon = Polygon().from_raw_coords(\n    coordinates, geojson=True\n)\n\ndfi.query.unique_id_counts(\n    dataset_id,\n    uids=uids,\n    time_range=time_range,\n    geometry=geometry,\n)\n</code></pre> Source code in <code>dfi/services/query.py</code> <pre><code>def unique_id_counts(\n    self,\n    dataset_id: str,\n    uids: list[str | int] | None = None,\n    geometry: Polygon | BBox | None = None,\n    time_range: TimeRange | None = None,\n    filter_fields: list[FilterField] | None = None,\n) -&gt; dict[str | int, int]:\n    \"\"\"Query for the number of records for each id within the filter bounds.\n\n    ??? info \"Endpoint\"\n        [POST /v1/query](https://api.prod.generalsystem.com/docs/api#/Query%20(v1)/post_v1_query)\n\n    Parameters\n    ----------\n    dataset_id:\n        the dataset to be queried.\n    uids:\n        specifies which uids to search for.\n    geometry:\n        specifies the spatial bounds to search within.\n    time_range:\n        specifies the time bounds to search within.\n    filter_fields:\n        specifies filters on Filter Fields.\n\n    Returns\n    -------\n    unique ids count\n        The count of records for each id within the bounds.\n\n    Raises\n    ------\n    DFIResponseError\n    TimeRangeUndefinedError\n    PolygonUndefinedError\n    BBoxUndefinedError\n    ValueError\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n    from dfi.models.filters import TimeRange\n    from dfi.models.filters.geometry import Polygon\n\n    dfi = Client(\"&lt;token&gt;\", \"&lt;url&gt;\")\n\n    dataset_id = \"&lt;dataset id&gt;\"\n\n    uids = [\"01234567-89AB-CDEF-1234-0123456789AB\"]\n    time_range = TimeRange().from_strings(\n        min_time=\"2022-01-01T08:00:00Z\",\n        max_time=\"2022-02-01T08:00:00Z\",\n    )\n\n    coordinates = [\n        [0.0, 0.0],\n        [1.0, 0.0],\n        [1.0, 1.0],\n        [0.0, 1.0],\n        [0.0, 0.0],\n    ]\n    polygon = Polygon().from_raw_coords(\n        coordinates, geojson=True\n    )\n\n    dfi.query.unique_id_counts(\n        dataset_id,\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n    )\n    ```\n    \"\"\"\n    query_doc = QueryDocument(\n        dataset_id=dataset_id,\n        return_model=Count(groupby=GroupBy(\"uniqueId\")),\n        uids=uids,\n        time_range=time_range,\n        geometry=geometry,\n        filter_fields=filter_fields,\n    )\n    self._document = query_doc.build()\n\n    with self.conn.api_post(\"v1/query\", json=self._document) as response:\n        client = SSEClient(response)  # type: ignore[arg-type]\n        return self._receive_unique_id_counts(client)\n</code></pre>"},{"location":"reference/services/users/","title":"Users","text":""},{"location":"reference/services/users/#dfi.services.users","title":"users","text":"<p>Manages user authentication via the User Management API service.</p>"},{"location":"reference/services/users/#dfi.services.users.Users","title":"Users","text":"<pre><code>Users(conn: Connect)\n</code></pre> <p>Class responsible handling users.</p> Source code in <code>dfi/services/users.py</code> <pre><code>def __init__(self, conn: Connect) -&gt; None:\n    self.conn = conn\n</code></pre>"},{"location":"reference/services/users/#dfi.services.users.Users.create_user","title":"create_user","text":"<pre><code>create_user(user: dict) -&gt; dict\n</code></pre> <p>Create a new user.</p> Endpoint <p>POST /v1/users</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>dict</code> <p>a user specification to create.</p> required <p>Returns:</p> Name Type Description <code>user</code> <code>dict</code> <p>the created user.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nuser = {\n    \"userName\": \"iain.m.banks\",\n    \"name\": {\n        \"givenName\": \"Iain\",\n        \"familyName\": \"Banks\",\n    },\n    \"emails\": [\n        {\n            \"value\": \"iain.m.banks@organization.com\",\n            \"primary\": True,\n        }\n    ],\n    \"active\": True,\n}\ncreated_user = dfi.users.create_user(user)\n</code></pre> Source code in <code>dfi/services/users.py</code> <pre><code>def create_user(self, user: dict) -&gt; dict:\n    \"\"\"Create a new user.\n\n    ??? info \"Endpoint\"\n        [POST /v1/users](https://api.prod.generalsystem.com/docs/api#/User%20Management%20(v1)/post_v1_users)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    user:\n        a user specification to create.\n\n    Returns\n    -------\n    user:\n        the created user.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    user = {\n        \"userName\": \"iain.m.banks\",\n        \"name\": {\n            \"givenName\": \"Iain\",\n            \"familyName\": \"Banks\",\n        },\n        \"emails\": [\n            {\n                \"value\": \"iain.m.banks@organization.com\",\n                \"primary\": True,\n            }\n        ],\n        \"active\": True,\n    }\n    created_user = dfi.users.create_user(user)\n    ```\n    \"\"\"\n    with self.conn.api_post(\"v1/users\", json=user, stream=False) as response:\n        response.raise_for_status()\n        created_user: dict = response.json()\n        return created_user\n</code></pre>"},{"location":"reference/services/users/#dfi.services.users.Users.delete_user","title":"delete_user","text":"<pre><code>delete_user(user_id: str) -&gt; None\n</code></pre> <p>Remove a user from the system. This removes all identities and access tokens that exist for the user as well.</p> Endpoint <p>DELETE /v1/users/{id}</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>an id of a user.</p> required <p>Returns:</p> Name Type Description <code>identity</code> <code>None</code> <p>the identity of the given id.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nidentity = dfi.users.delete_user(\"&lt;user id&gt;\")\n</code></pre> Source code in <code>dfi/services/users.py</code> <pre><code>def delete_user(self, user_id: str) -&gt; None:\n    \"\"\"Remove a user from the system. This removes all identities and access tokens that exist for the user as well.\n\n    ??? info \"Endpoint\"\n        [DELETE /v1/users/{id}](https://api.prod.generalsystem.com/docs/api#/User%20Management%20(v1)/delete_v1_users__id_)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    user_id:\n        an id of a user.\n\n    Returns\n    -------\n    identity:\n        the identity of the given id.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    identity = dfi.users.delete_user(\"&lt;user id&gt;\")\n    ```\n    \"\"\"\n    with self.conn.api_delete(f\"v1/users/{user_id}\", stream=False) as response:\n        response.raise_for_status()\n        return None\n</code></pre>"},{"location":"reference/services/users/#dfi.services.users.Users.get_user","title":"get_user","text":"<pre><code>get_user(user_id: str) -&gt; dict\n</code></pre> <p>Retrieve details about a user by id.</p> Endpoint <p>GET /v1/users/{id}</p> Admin Request <p>You need to be an admin for this request.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>an id of a user.</p> required <p>Returns:</p> Name Type Description <code>identity</code> <code>dict</code> <p>the identity of the given id.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nidentity = dfi.users.get_user(\"&lt;user id&gt;\")\n</code></pre> Source code in <code>dfi/services/users.py</code> <pre><code>def get_user(self, user_id: str) -&gt; dict:\n    \"\"\"Retrieve details about a user by id.\n\n    ??? info \"Endpoint\"\n        [GET /v1/users/{id}](https://api.prod.generalsystem.com/docs/api#/User%20Management%20(v1)/get_v1_users__id_)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Parameters\n    ----------\n    user_id:\n        an id of a user.\n\n    Returns\n    -------\n    identity:\n        the identity of the given id.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    identity = dfi.users.get_user(\"&lt;user id&gt;\")\n    ```\n    \"\"\"\n    with self.conn.api_get(f\"v1/users/{user_id}\", stream=False) as response:\n        response.raise_for_status()\n        user: dict = response.json()\n        return user\n</code></pre>"},{"location":"reference/services/users/#dfi.services.users.Users.get_users","title":"get_users","text":"<pre><code>get_users() -&gt; list[dict]\n</code></pre> <p>Retrieve the list of users in the realm.</p> Endpoint <p>GET /v1/users</p> Admin Request <p>You need to be an admin for this request.</p> <p>Returns:</p> Name Type Description <code>identity</code> <code>list[dict]</code> <p>the identity of the given id.</p> <p>Examples:</p> <pre><code>from dfi import Client\n\ndfi = Client(token, url)\n\nusers = dfi.users.get_users()\n</code></pre> Source code in <code>dfi/services/users.py</code> <pre><code>def get_users(self) -&gt; list[dict]:\n    \"\"\"Retrieve the list of users in the realm.\n\n    ??? info \"Endpoint\"\n        [GET /v1/users](https://api.prod.generalsystem.com/docs/api#/User%20Management%20(v1)/get_v1_users)\n\n    ??? tip \"Admin Request\"\n        You need to be an admin for this request.\n\n    Returns\n    -------\n    identity:\n        the identity of the given id.\n\n    Examples\n    --------\n    ```python\n    from dfi import Client\n\n    dfi = Client(token, url)\n\n    users = dfi.users.get_users()\n    ```\n    \"\"\"\n    with self.conn.api_get(\"v1/users\", stream=False) as response:\n        response.raise_for_status()\n        users: list[dict] = response.json()\n        return users\n</code></pre>"}]}